<?xml version="1.0" encoding="utf-8"?>
<doc>
				
	<assembly>
		<name>ShinobiEssentials</name>
	</assembly>
			
	<members>

	    <member name="T:ShinobiEssentials.SEssentials">
			<summary>A global utility class for the ShinobiEssentials framework.</summary>
			<remarks>
				<para>
					It allows you to do the following:
					<list type="bullet">
						<item>
							<term>
								Get information on the version of the framework.
							</term>
						</item>
						<item>
							<term>
								For trial versions of ShinobiEssentials, it allows you to set the license key.
								This enables you to use the framework for the duration of the trial period.
							</term>
						</item>
						<item>
							<term>
								It defines a global theme.
								If a SEssentialsStyle object is not created with a specific instance of a theme,
								it uses the global theme.
								This allows us to define a common appearance for all controls within an application.
							</term>
						</item>
					</list>
				</para>
				<para>
					All controls by default use the global theme.
					To access this theme and set one of its values you would use the following code:
					<code>SEssentialsTheme globalTheme = SEssentials.Theme;</code>

					If you wish to change the current global theme then use:
					<code>SEssentials.Theme = new SEssentialsDarkTheme();</code>

					To change the primary tint color on all controls using the theme you would use the following code:
					<code>globalTheme.PrimaryTintColor = UIColor.Red;</code>
				</para><para>
					Once you've updated the theme, you should go through all your controls and call <c>ApplyTheme</c> on them,
					to configure them from the theme.
				</para>
			</remarks>
	    </member>
	
	    <member name="M:ShinobiEssentials.SEssentials.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentials.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentials.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentials.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentials.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
	    
	    <member name="M:ShinobiEssentials.SEssentials.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentials.SetLicenseKey(System.String)">
			<summary>Sets the license key for the trial version of the ShinobiEssentials framework.</summary>
			<remarks>You will be emailed the license key when you download the framework.</remarks>
			<param name="licenseKey"></param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentials.VerifyLicenseKey">
			<summary>Verifies the license key.</summary>
			<remarks>Each control in the framework does this when they are initialized.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentials.Info">
			<summary>The version number of the framework, and the date on which it was built.</summary>
	    </member>
		
		<member name="P:ShinobiEssentials.SEssentials.Theme">
			<summary>
				The global theme, which is used by default when creating any new ShinobiEssentials controls.
			</summary>
			<remarks>
				<para>
					This defaults to <see cref="T:ShinobiEssentials.SEssentialsDarkTheme" />.
				</para>
			</remarks>
		</member>
		
		
	    <member name="T:ShinobiEssentials.Messaging">
			<summary>Generated class for Objective C integration</summary>
			<remarks>Do not use this class directly in application code</remarks>
	    </member>
			
			
	    <member name="T:ShinobiEssentials.SEssentialsAccordion">
			<summary>SEssentialsAccordion (or simply, an accordion) is a means for  displaying lists of information, where some of the information is shown, and  some of the information is hidden.</summary>
			<remarks>
				<para>  An accordion is made up of zero or more sections <see cref="T:ShinobiEssentials.SEssentialsAccordionSection"/>.  You can open or close sections to display or hide the information
				 they contain.</para>
				 
				<para> Each section is implemented using the SEssentialsAccordionSection class. 
				 A section has a header view and a content view. 
				 You can either define a custom view for the header, or you can simply define a
				 title for the section and use the default header view.  You supply the content
				 to be displayed in each section.</para>
				
				<para>Each section header contains an instance of <see cref="T:ShinobiEssentials.SEssentialsAccordionSectionHeaderStyle"/>.  This style object manages the appearance of the section.</para>
				
				<para> An accordion must have an object that acts as a DataSource. The DataSource
				 must adopt the <see cref="T:ShinobiEssentials.SEssentialsAccordionDataSource"/> protocol. 
				 The DataSource provides the content for each of the sections when they are
				 displayed in "open" mode.</para>
				 
				<para>
					The content supplied by the DataSource is only retained by the Accordion while the content is visible on screen, and will be released
					when scrolled off screen or the section is closed.
					It is up to the class adopting the <see cref="T:ShinobiEssentials.SEssentialsAccordionDataSource"/> protocol to retain content so it
					can be requested at any time.
				</para>
				 
				<para> An accordion can optionally have an object that acts as a delegate. 
				 The delegate must adopt the <see cref="T:ShinobiEssentials.SEssentialsAccordionDelegate"/> protocol. The delegate
				 is notified when sections are opened, closed, added, deleted or moved.</para>
				 
				<para>
					There are currently two types of accordion:
					<list type="bullet">
						<item>
							<term>
								A fixed accordion only shows the contents of one section at a time.
								When a section is opened, the previously open section is closed.
								The accordion has a fixed size, and does not scroll.
							</term>
						</item>
						<item>
							<term>
								A flexible accordion allows multiple sections to be open at the same time.
								Its contents can be bigger than its frame. In this case, it will scroll up and down.
							</term>
						</item>
					</list>
				</para>
			</remarks>
	    </member>
	
	    <member name="M:ShinobiEssentials.SEssentialsAccordion.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsAccordion.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordion.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordion.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordion.#ctor(System.Drawing.RectangleF)">
			<summary>Initialize view with the specified frame rectangle.</summary>
			<param name="frame">Frame rectangle defining views extent</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordion.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordion.DataSource">
			<summary>The DataSource provides the content for each of the accordion sections</summary>
			<remarks>Important. It is your responsibility to hold a reference to your data source, to avoid it being garbage collected. 
			This property does not do this for you (unlike most properties in the API) to match the behavior of the native code.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordion.WeakDataSource">
			<summary>A weakly typed data source.</summary>
			<remarks><see cref="P:ShinobiEssentials.SEssentialsAccordion.DataSource"/></remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordion.Delegate">
			<summary>The delegate is notified when sections are opened, closed, deleted or removed.</summary>
			<remarks>Important. It is your responsibility to hold a reference to your delegate (if it is a separate object), to avoid it being garbage collected. 
			This property does not do this for you (unlike most properties in the API) to match the behavior of the native code.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordion.WeakDelegate">
			<summary>A weakly typed delegate.</summary>
			<remarks><see cref="P:ShinobiEssentials.SEssentialsAccordion.Delegate"/></remarks>
	    </member>
			
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordion.AccordionType">
			<summary>The type of accordion.</summary>
			<remarks>
				<para>
					Default to <see cref="F:ShinobiEssentials.SEssentialsAccordionType.Flexible" />.
				</para>
				<para> A fixed accordion only shows the contents of one section at a time.  When a section is opened, the previously open section is closed.  The accordion has a fixed size, and does not scroll.</para>
				<para> A flexible accordion allows multiple sections to be open at the same time.  Its contents can be bigger than its frame.  In this case, it will scroll up and down.</para>
			</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordion.LazyLoading">
			<summary>
				Controls if the accordion populates section content on loading the section, or on opening the section.
			</summary>
			<remarks>
				Defaults to <c>false</c>.
				If <c>true</c>, load content only when section is opened.
				If <c>false</c>, eagerly load content when section is created.
				Cannot be set while the DataSource is set, and will throw an exception if this is attempted.
				Instead, the DataSource should be set to <c>null</c> before changing this value.
			</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordion.Sections">
			<summary>A shallow copy of the sections which the accordion control contains.</summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordion.Editing">
			<summary>Whether or not the 'move' and 'delete' accessories are visible, allowing movement and deletion.</summary>
			<remarks>This defaults to false.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordion.Editable">
			<summary>Whether or not you can swipe to delete a section within the accordion.</summary>
			<remarks>This defaults to true.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordion.FloatingHeader">
			<summary>Specifies whether the topmost section should slide under its header until pushed off screen.</summary>
			<remarks>This defaults to true.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordion.ScrollBounceEnabled">
			<summary>Specifies whether the accordion bounces when it reaches the limit of its scrolling.</summary>
			<remarks>Defaults to true</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordion.CornerRadius">
			<summary>The default radius which is given to the corners of the accordion.</summary>
			<remarks>Defaults to 5</remarks>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordion.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordion.AddSection(ShinobiEssentials.SEssentialsAccordionSection)">
			<summary>Add a single section to the accordion.</summary>
			<remarks>This will appear at the end (bottom) of the accordion</remarks>
			<param name="section">The SEssentialsAccordionSection to be added</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordion.AddSections(ShinobiEssentials.SEssentialsAccordionSection[])">
			<summary>Add an array of sections to the accordion.</summary>
			<param name="sections">An array of SEssentialsAccordionSection to be added</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordion.InsertSection(ShinobiEssentials.SEssentialsAccordionSection,System.Int32)">
			<summary>Adds a single section to the accordion at the specified index.</summary>
			<remarks>This will push the sections below (i.e. with this index or higher) down the accordion</remarks>
			<param name="section">The SEssentialsAccordionSection to be added</param>
			<param name="index">The index at which to add the section</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordion.MoveSection(System.Int32,System.Int32)">
			<summary>Moves a section within the accordion</summary>
			<param name="fromIndex">The index where the section can currently be found.</param>
			<param name="toIndex">The index where the section should be moved to.</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordion.ReloadSection(ShinobiEssentials.SEssentialsAccordionSection)">
			<summary>Reloads the content of a section, by fetching the new content from the DataSource.</summary>
			<param name="section">The section to reload.</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordion.ReloadAllSections">
			<summary>Reloads the contents of all sections, by fetching new content from the DataSource.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordion.RemoveAllSections">
			<summary>Removes all sections from the accordion.</summary>
			<remarks>This will reset the content and leave a completely empty accordion.</remarks>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordion.RemoveSection(ShinobiEssentials.SEssentialsAccordionSection)">
			<summary>Removes the section from the accordion.</summary>
			<remarks>The removal will be animated.</remarks>
			<param name="section">The SEssentialsAccordionSection to be removed</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordion.RemoveSection(System.Int32)">
			<summary>Removes the section at the specified index from the accordion.</summary>
			<param name="index">The index of the section to be removed</param>
	    </member>
		
		<member name="M:ShinobiEssentials.SEssentialsAccordion.ApplyTheme(ShinobiEssentials.SEssentialsTheme)">
			<summary>
				Updates the style of the accordion using the specified theme.
			</summary>
			<remarks></remarks>
		</member>

	    <member name="T:ShinobiEssentials.SEssentialsAccordionDataSource">
			<summary>The SEssentialsAccordionDataSource protocol is adopted by an object to provide the content for the sections within the accordion.</summary>
			<remarks>
				The content supplied by the DataSource is only retained by the Accordion while the content is visible on screen,
				and will be released when scrolled off screen or the section is closed.
				It is up to the class adopting the SEssentialsAccordionDataSource protocol to retain content so it can be requested at any time.
			</remarks>
	    </member>
	
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDataSource.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDataSource.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDataSource.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDataSource.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordionDataSource.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDataSource.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDataSource.ConformsToProtocol(System.IntPtr)">
	      <summary>Checks whether this object conforms to a protocol.
	      </summary>
		  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
		  <param name="protocol">The protocol</param>
		  <returns>True if the object conforms to the protocol</returns>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDataSource.GetContent(ShinobiEssentials.SEssentialsAccordion,ShinobiEssentials.SEssentialsAccordionSection)">
			<summary>Provides the content UIView for a given section.</summary>
			<remarks>This method is called at some point between the section being added to an accordion, and the section being
 opened. If the DataSource on an accordion is replaced, the content for each section will be re-requested.</remarks>
			<param name="accordion">The SEssentialsAccordion requesting the content</param>
			<param name="section">The SEssentialsAccordionSection for which the content is being requested</param>
	    </member>
			

	    <member name="T:ShinobiEssentials.SEssentialsAccordionDelegate">
			<summary>The delegate of a SEssentialsAccordion object must adopt the SEssentialsAccordionDelegate protocol.</summary>
			<remarks>Optional methods of the protocol allow the delegate to keep track of when sections in the accordion are opened, closed, added, deleted or moved.</remarks>
	    </member>
	
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDelegate.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDelegate.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDelegate.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDelegate.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordionDelegate.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDelegate.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDelegate.ConformsToProtocol(System.IntPtr)">
	      <summary>Checks whether this object conforms to a protocol.
	      </summary>
		  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
		  <param name="protocol">The protocol</param>
		  <returns>True if the object conforms to the protocol</returns>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDelegate.ShouldOpenSection(ShinobiEssentials.SEssentialsAccordion,ShinobiEssentials.SEssentialsAccordionSection)">
			<summary>Called before a section is opened.</summary>
			<param name="accordion">The SEssentialsAccordion sending this message</param>
			<param name="section">The section to be opened</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDelegate.WillOpenSection(ShinobiEssentials.SEssentialsAccordion,ShinobiEssentials.SEssentialsAccordionSection)">
			<summary>Called before a section is opened.</summary>
			<param name="accordion">The SEssentialsAccordion sending this message</param>
			<param name="section">The section to be opened</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDelegate.DidOpenSection(ShinobiEssentials.SEssentialsAccordion,ShinobiEssentials.SEssentialsAccordionSection)">
			<summary>Called when a section has been opened.</summary>
			<param name="accordion">The SEssentialsAccordion sending this message</param>
			<param name="section">The section that has been opened</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDelegate.ShouldCloseSection(ShinobiEssentials.SEssentialsAccordion,ShinobiEssentials.SEssentialsAccordionSection)">
			<summary>Called before a section is closed.</summary>
			<param name="accordion">The SEssentialsAccordion sending this message</param>
			<param name="section">The section to be closed</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDelegate.WillCloseSection(ShinobiEssentials.SEssentialsAccordion,ShinobiEssentials.SEssentialsAccordionSection)">
			<summary>Called before a section is closed.</summary>
			<param name="accordion">The SEssentialsAccordion sending this message</param>
			<param name="section">The section to be closed</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDelegate.DidCloseSection(ShinobiEssentials.SEssentialsAccordion,ShinobiEssentials.SEssentialsAccordionSection)">
			<summary>Called when a section has been closed.</summary>
			<param name="accordion">The SEssentialsAccordion sending this message</param>
			<param name="section">The section that has been closed</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDelegate.ShouldRemoveSection(ShinobiEssentials.SEssentialsAccordion,ShinobiEssentials.SEssentialsAccordionSection)">
			<summary>Called before a section is removed.</summary>
			<param name="accordion">The SEssentialsAccordion sending this message</param>
			<param name="section">The section to be removed</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDelegate.WillRemoveSection(ShinobiEssentials.SEssentialsAccordion,ShinobiEssentials.SEssentialsAccordionSection)">
			<summary>Called before a section is removed.</summary>
			<param name="accordion">The SEssentialsAccordion sending this message</param>
			<param name="section">The section to be removed</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDelegate.DidRemoveSection(ShinobiEssentials.SEssentialsAccordion,ShinobiEssentials.SEssentialsAccordionSection)">
			<summary>Called when a section has been removed.</summary>
			<param name="accordion">The SEssentialsAccordion sending this message</param>
			<param name="section">The section that has been removed</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDelegate.WillInsertSection(ShinobiEssentials.SEssentialsAccordion,ShinobiEssentials.SEssentialsAccordionSection,System.Int32)">
			<summary>Called before a new section is inserted into the accordion.</summary>
			<param name="accordion">The SEssentialsAccordion sending this message</param>
			<param name="section">The section to be inserted</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDelegate.DidInsertSection(ShinobiEssentials.SEssentialsAccordion,ShinobiEssentials.SEssentialsAccordionSection,System.Int32)">
			<summary>Called when a new section has been inserted into the accordion.</summary>
			<param name="accordion">The SEssentialsAccordion sending this message</param>
			<param name="section">The section</param>
			<param name="index">The final index of the inserted section</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDelegate.ShouldMoveSection(ShinobiEssentials.SEssentialsAccordion,System.Int32,System.Int32)">
			<summary>Called before a section is moved.</summary>
			<param name="accordion">The SEssentialsAccordion sending this message.</param>
			<param name="fromIndex">The start index of the moving section.</param>
			<param name="toIndex">The final index of the moving section.</param>
			<returns>Returning <c>false</c> will block the section from moving.</returns>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDelegate.WillMoveSection(ShinobiEssentials.SEssentialsAccordion,System.Int32,System.Int32)">
			<summary>Called when a section is about to move.</summary>
			<param name="accordion">The SEssentialsAccordion sending this message.</param>
			<param name="fromIndex">The start index of the moving section.</param>
			<param name="toIndex">The final index of the moving section.</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionDelegate.DidMoveSection(ShinobiEssentials.SEssentialsAccordion,System.Int32,System.Int32)">
			<summary>Called when a section has been moved.</summary>
			<param name="accordion">The SEssentialsAccordion sending this message.</param>
			<param name="fromIndex">The start index of the moving section.</param>
			<param name="toIndex">The final index of the moving section.</param>
	    </member>
			

	    <member name="T:ShinobiEssentials.SEssentialsAccordionSection">
			<summary>SEssentialsAccordionSection is a UIView representing an individual section within a SEssentialsAccordion</summary>
			<remarks>
				<para>The SEssentialsAccordionSection class holds information about a single section
 in an SEssentialsAccordion. Each section has a header of type <see cref="T:ShinobiEssentials.SEssentialsAccordionSectionHeader"/> and a content view of type UIView.</para>
			</remarks>
	    </member>
	
	    <member name="M:ShinobiEssentials.SEssentialsAccordionSection.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsAccordionSection.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionSection.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionSection.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
		<member name="M:ShinobiEssentials.SEssentialsAccordionSection.#ctor(System.Drawing.RectangleF)">
		  <summary>Instantiates with the specified frame rectangle.
		  </summary>
		  <remarks></remarks>
		  <param name="frame">The frame rectangle</param>
		</member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionSection.#ctor(System.Drawing.RectangleF,System.String)">
			<summary>An SEssentialsAccordionSection is typically created like this with default
 implementation for the header.</summary>
 			<remarks>Creates the section, with header and content. Applies the style and title to the header.</remarks>
			<param name="frame">The frame for the SEssentialsAccordionSection. The width of this
   will be changed to match that of the accordion when you add the section to an
   accordion.</param>
			<param name="title">The title to be displayed in the header</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionSection.#ctor(System.Drawing.RectangleF,ShinobiEssentials.SEssentialsAccordionSectionHeader)">
			<summary>Use this constructor to create the section by supplying the header.</summary>
			<remarks>Creates the section, with content and the given header. Applies the style to the header.</remarks>
			<param name="frame">The frame for the SEssentialsAccordionSection. The width of this
   will be changed to match that of the accordion when you add the section to an accordion.</param>
			<param name="header">An SEssentialsAccordionSectionHeader to use as the header for the section</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordionSection.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionSection.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordionSection.Accordion">
			<summary>The accordion within which the section is contained.</summary>
			<remarks>Set by the accordion when the section is added to it.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordionSection.Content">
			<summary>The content for the view.</summary>
			<remarks>This property is readonly because the content is provided by the accordion's DataSource.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordionSection.Header">
			<summary>The header for the accordion section.</summary>
			<remarks>This is readonly because the header view should be provided at construction time.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordionSection.Open">
			<summary>Whether or not the section is currently open.</summary>
			<remarks>When set to true it opens the section. This means the section will 
 display the content view provided by the accordion's DataSource. 
 If in fixed mode the accordion will close the currently open view. 
 When set to false closes the section. The section display will consist 
 solely of its header view.</remarks>
	    </member>
			

	    <member name="T:ShinobiEssentials.SEssentialsAccordionSectionHeader">
			<summary>The SEssentialsAccordionSectionHeader contains information relevant to an SEssentialsAccordionSection header.</summary>
			<remarks>
				<para>
					SEssentialsAccordionSectionHeader is typically instantiated with:
					<code>new SEssentialsAccordionSectionHeader(frame, title);</code>
				</para>
 
				<para>The SEssentialsAccordionSectionHeader has a style object, which is an instance of <see cref="T:ShinobiEssentials.SEssentialsAccordionSectionHeaderStyle"/>.
				This manages the look and feel of the control by setting things like the tint color and background texture of the header.
				The style object should always be used to update the look of the control, rather than accessing the accordion section header
				and setting its properties directly.</para>

				<para>The style has precedence over any visual changes which are made to the accordion section header directly. For example,
				if you were to set a property such as the background color on the accordion section header directly, this change will be
				overridden the next time the style is updated. That is why it is important to use the style to manage the look and feel of
				the control.</para>
 			</remarks>
	    </member>
	
	    <member name="M:ShinobiEssentials.SEssentialsAccordionSectionHeader.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsAccordionSectionHeader.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionSectionHeader.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionSectionHeader.#ctor(System.Drawing.RectangleF)">
			<summary>Standard UIView constructor</summary>
			<param name="frame">The frame rectangle</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionSectionHeader.#ctor(System.Drawing.RectangleF,System.String)">
			<summary>Initializes the section header with a given title.</summary>
			<remarks>The SEssentialsAccordionSectionHeader is given a default style. This is the typical method used for instantiating an
 SEssentialsAccordionSectionHeader.</remarks>
			<param name="frame">The frame rectangle</param>
			<param name="title">The title displayed in the section header</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionSectionHeader.#ctor(System.Drawing.RectangleF,System.String,ShinobiEssentials.SEssentialsAccordionSectionHeaderStyle)">
			<summary>Initializes the section header with a given title and style.</summary>
			<param name="frame">The frame rectangle</param>
			<param name="title">The title displayed in the section header</param>
			<param name="style">The section header style used to configure the appearance of the header</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionSectionHeader.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordionSectionHeader.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionSectionHeader.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordionSectionHeader.SectionTitleLabel">
			<summary>A label displaying the title of the section.</summary>
			<remarks>The font and font color are controlled in the style.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordionSectionHeader.Style">
			<summary>A reference to the style controlling the style of the section header and content.</summary>
			<remarks>The style must be provided at construction time.</remarks>
	    </member>
			

	    <member name="T:ShinobiEssentials.SEssentialsAccordionSectionHeaderStyle">
			<summary>
				The SEssentialsAccordionSectionHeaderStyle defines the look and feel for an instance of
				the SEssentialsAccordionSectionHeader class.
			</summary>
			<remarks>
				<para>
					If you wish to configure how an accordion section header looks, you should set the relevant properties on this class.
				</para><para>
					<c>SEssentialsAccordionSectionHeaderStyle</c> derives from <c>SEssentialsStyle</c>, and
					so it is initialized using a <c>SEssentialsTheme</c> object.
					The theme sets the default properties of the style.
				</para><para>
					The following settings are set by default from the theme:
					<list type="bullet">
						<item>
							<term>
								The <c>PrimaryTintColor</c> on the theme is used for the background color of the header
								(<c>BackgroundColor</c>).
							</term>
						</item>
						<item>
							<term>
								The <c>SecondaryTintColor</c> on the theme is used for the section background color
								(<c>SectionBackgroundColor</c>) and the selected header color (<c>SelectedBackgroundColor</c>).
							</term>
						</item>
						<item>
							<term>
								The <c>PrimaryTextColor</c> on the theme is used for the font color in the header
								(<c>FontColor</c>).
							</term>
						</item>
						<item>
							<term>
								The <c>PrimaryDecorationTintColor</c> on the theme is used for the color of the chisel at the
								top of the header (<c>ChiselPrimaryColor</c>).
							</term>
						</item>
						<item>
							<term>
								The <c>SecondaryDecorationTintColor</c> on the theme is used for the color of the chisel at
								the bottom of the header (<c>ChiselSecondaryColor</c>).
							</term>
						</item>
						<item>
							<term>
								The <c>ShineColor</c> on the theme is used for the shine color (<c>ShineColor</c>).
							</term>
						</item>
						<item>
							<term>
								The <c>ShadowColor</c> and <c>ShadowDepth</c> properties on the theme set the matching
								properties on the style (<c>ShadowColor</c> and <c>ShadowDepth</c>).
							</term>
						</item>
					</list>
				</para>
			</remarks>
	    </member>
	
	    <member name="M:ShinobiEssentials.SEssentialsAccordionSectionHeaderStyle.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsAccordionSectionHeaderStyle.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionSectionHeaderStyle.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
		<member name="M:ShinobiEssentials.SEssentialsAccordionSectionHeaderStyle.#ctor(ShinobiEssentials.SEssentialsTheme)">
		  <summary>Instantiates the style with the specified theme.</summary>
		  <param name="theme">The theme</param>
		</member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionSectionHeaderStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordionSectionHeaderStyle.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsAccordionSectionHeaderStyle.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordionSectionHeaderStyle.SectionCornerRadius">
			<summary>The rounding at the corners on each section.</summary>
			<remarks>Default is 0</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordionSectionHeaderStyle.SectionBackgroundColor">
			<summary>The background color of the section.</summary>
			<remarks>This defaults to the <c>SecondaryTintColor</c> on the theme.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordionSectionHeaderStyle.BackgroundColor">
			<summary>The background color of the section header.</summary>
			<remarks>This defaults to the <c>PrimaryTintColor</c> on the theme.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordionSectionHeaderStyle.SelectedBackgroundColor">
			<summary>The background color of a selected section header.</summary>
			<remarks>This defaults to the <c>SecondaryTintColor</c> on the theme.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordionSectionHeaderStyle.Font">
			<summary>The font of the UILabel which displays the title in the section header.</summary>
			<remarks>This defaults to the <c>PrimaryFont</c> on the theme.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordionSectionHeaderStyle.FontColor">
			<summary>The color of title in the section header.</summary>
			<remarks>This defaults to the <c>PrimaryTextColor</c> on the theme.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordionSectionHeaderStyle.Texture">
			<summary>The texture which is applied to the section header.</summary>
			<remarks>This defaults to a clear color.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsAccordionSectionHeaderStyle.ShowDecoration">
			<summary>DEPRECATED: This property is no longer used.</summary>
			<remarks>
				If you would like to configure the decoration on the section header, you should use the properties on the
				style which configure the particular setting you need, such as <c>ShineColor</c>, <c>ChiselPrimaryColor</c>,
				<c>ChiselSecondaryColor</c> etc.
			</remarks>
	    </member>
		
		<member name="P:ShinobiEssentials.SEssentialsAccordionSectionHeaderStyle.PressedBackgroundColor">
			<summary>
				The background color of an pressed section header.
			</summary>
			<remarks>
				This defaults to the <c>ActiveTintColor</c> on the theme.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsAccordionSectionHeaderStyle.ShineColor">
			<summary>
				The color of the shine layer over the header.
			</summary>
			<remarks>
				Defaults to the <c>ShineColor</c> of the theme.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsAccordionSectionHeaderStyle.ChiselPrimaryColor">
			<summary>
				The top color of the chisel separating the header from the content.
			</summary>
			<remarks>
				Defaults to the <c>PrimaryDecorationTintColor</c> of the theme.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsAccordionSectionHeaderStyle.ChiselSecondaryColor">
			<summary>
				The bottom color of the chisel separating the header from the content.
			</summary>
			<remarks>
				Defaults to the <c>SecondaryDecorationTintColor</c> of the theme.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsAccordionSectionHeaderStyle.ShadowColor">
			<summary>
				The color of the drop shadow under the section.
			</summary>
			<remarks>
				Defaults to the <c>ShadowColor</c> of the theme.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsAccordionSectionHeaderStyle.ShadowDepth">
			<summary>
				The depth of the drop shadow under the section.
			</summary>
			<remarks>
				Defaults to the <c>ShadowDepth</c> of the theme.
			</remarks>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsAccordionType">
			<summary>Accordion type options: Flexible, Fixed</summary>
			<remarks>
				Used by <see cref="P:ShinobiEssentials.SEssentialsAccordion.AccordionType" />.
			</remarks>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsAccordionType.Fixed">
			<summary>Only one section is visible at a time.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsAccordionType.Flexible">
			<summary>Mutliple sections can be visible at a time.</summary>
		</member>


	    <member name="T:ShinobiEssentials.SEssentialsActivityIndicator">
			<summary>
				An SEssentialsActivityIndicator shows that a task is in progress.
			</summary>
			<remarks>
 				<para>
 					The SEssentialsActivityIndicator is used to show that a task is in progress.
 					An activity indicator starts animating when it is instantiated.
 				</para>
				<para>
					You can control the proportion of the indicator which is filled at any time using
					<see cref="P:ShinobiEssentials.SEssentialsActivityIndicator.FillProportion" />.
					You can control how long the indicator takes to make a full revolution using
					<see cref="P:ShinobiEssentials.SEssentialsActivityIndicator.CycleTime" />.
				</para>
				<para>
					To create an activity indicator, you use one of the factory methods provided.
					For example:
					<code>SEssentialsActivityIndicator activityIndicator = SEssentialsActivityIndicator.Create(SEssentialsIndicatorType.RadialContinuous, new RectangleF(0, 0, 200, 200));</code>
					This returns a activity indicator which you can use in your code.
				</para>
				<para>
					When creating an indicator, you specify the type of indicator you would like.
					The following types are available:
					<list type="bullet">
						<item>
							<term>
								<see cref="F:ShinobiEssentials.SEssentialsIndicatorType.LinearContinuous" />: A continuous horizontal activity indicator.
							</term>
						</item>
						<item>
							<term>
								<see cref="F:ShinobiEssentials.SEssentialsIndicatorType.LinearDiscrete" />: A horizontal activity indicator, made up of a set of discrete elements.
							</term>
						</item>
						<item>
							<term>
								<see cref="F:ShinobiEssentials.SEssentialsIndicatorType.RadialContinuous" />: A continuous radial activity indicator.
							</term>
						</item>
						<item>
							<term>
								<see cref="F:ShinobiEssentials.SEssentialsIndicatorType.RadialDiscrete" />: A radial activity indicator, made up of a set of discrete elements.
							</term>
						</item>
					</list>
				</para>
				<para>
					SEssentialsActivityIndicator inherits properties from SEssentialsProgressIndicator, so for discrete indicators you can set
					the number of elements in the indicator or the factory which provides elements to the indicator, in the same way as you would
					do for a progress indicator.
				</para>
			</remarks>
	    </member>
	
	    <member name="M:ShinobiEssentials.SEssentialsActivityIndicator.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsActivityIndicator.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsActivityIndicator.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsActivityIndicator.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsActivityIndicator.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsActivityIndicator.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsActivityIndicator.FillProportion">
			<summary>The proportion of the indicator which is filled.</summary>
			<remarks>The value of this property can range between 0 and 1.  The default value of this property is 0.35.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsActivityIndicator.CycleTime">
			<summary>The time which the indicator takes to make a full revolution, in seconds.</summary>
			<remarks>The default value of this property for continuous activity indicators is 5 seconds.  The default value of this property for discrete activity indicators is 1 second.</remarks>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsActivityIndicator.Create(ShinobiEssentials.SEssentialsIndicatorType,System.Drawing.RectangleF)">
			<summary>Creates an activity indicator</summary>
			<remarks>Use this instead of a constructor</remarks>
			<param name="indicatorType">The type of indicator to create</param>
			<param name="frame">The position and size of the indicator</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsActivityIndicator.Create(ShinobiEssentials.SEssentialsIndicatorType,System.Drawing.RectangleF,ShinobiEssentials.SEssentialsProgressIndicatorStyle)">
			<summary>Creates an activity indicator</summary>
			<remarks>Use this instead of a constructor</remarks>
			<param name="indicatorType">The type of indicator to create</param>
			<param name="frame">The position and size of the indicator</param>
			<param name="style">The indicator's visual style</param>
	    </member>


    	<member name="T:ShinobiEssentials.SEssentialsCarousel">
			<summary>
				An SEssentialsCarousel is a layout component for displaying a collection of UIViews, in any 2D or 3D configuration.
			</summary>
			<remarks>
				<para>
					Users wanting a preset layout type should use or subclass the relevant subclass of the carousel.
					This allows for various layouts, including:
					<list type="bullet">
						<item>
							<term>
								Horizontal &amp; Vertical 2D linear (<see cref="T:ShinobiEssentials.SEssentialsCarouselLinear2D" />)
								<img href="Linear2DThumb.png" />
							</term>
						</item>
						<item>
							<term>
								Horizontal &amp; Vertical 3D linear (<see cref="T:ShinobiEssentials.SEssentialsCarouselLinear3D" />)
								<img href="Linear3DThumb.png" />
							</term>
						</item>
						<item>
							<term>
								Horizontal &amp; Vertical Cover Flow (<see cref="T:ShinobiEssentials.SEssentialsCoverFlow" />)
								<img href="CoverFlowThumb.png" />
							</term>
						</item>
						<item>
							<term>
								Cylinder (<see cref="T:ShinobiEssentials.SEssentialsCarouselCylindrical" />)
								<img href="CylindricalThumb.png" />
							</term>
						</item>
						<item>
							<term>
								Inverse Cylinder (<see cref="T:ShinobiEssentials.SEssentialsCarouselInverseCylindrical" />)
								<img href="InverseCylindricalThumb.png" />
							</term>
						</item>
						<item>
							<term>
								Radial (<see cref="T:ShinobiEssentials.SEssentialsCarouselRadial" />)
								<img href="RadialScalingThumb.png" />
							</term>
						</item>
					</list>
				</para>
				<para>
					To create a carousel with a given type, such as Horizontal Cover Flow, initialize it as follows;
					<code>SEssentialsCoverFlow carousel = new SEssentialsCoverFlow(View.Bounds);
carousel.Orientation = SEssentialsCarouselOrientation.Horizontal;</code>
					The SEssentialsCarousel class is an abstract implementation, and should only be directly subclassed by advanced users,
					to implement their own layouts.
				</para>
				<para>
					If the carousel has an SEssentialsCarouselDelegate, the carousel will send updates about the carousel scrolling,
					items being displayed and or removed from display, and items being given a new layout.
					All of these are optional, but allow responses to changes in the state of the carousel.
				</para>
				<para>
					A carousel can either wrap items (<see cref="P:ShinobiEssentials.SEssentialsCarousel.WrapItems" />), such that items at
					each end loop and display the items from the other end, or stop panning upon reaching each end.
				</para>
				<para>
					The focus point (<see cref="P:ShinobiEssentials.SEssentialsCarousel.FocusPointNormalized" />) is the point on the carousel
					where the item in focus is placed.
					An item close to this point will move to settle exactly on this point.
					By default, the focus point is the center of the carousel.
					The carousel can move an item to the focus point by panning through the carousel items, or programmatically
					(<see cref="P:ShinobiEssentials.SEssentialsCarousel.FocusOnItemAtIndexAnimated" />).
				</para>
				<para>
					The carousel contains a SEssentialsCarouselDataSource object, which provides it with its items.
					Items are requested from the <see cref="P:ShinobiEssentials.SEssentialsCarousel.DataSource" /> as they become visible, and
					are removed from the carousel when they disappear off screen.
					The carousel can also be informed of a need to refresh the items (<see cref="M:ShinobiEssentials.SEssentialsCarousel.ReloadData" />)
					by requesting new items from the <see cref="P:ShinobiEssentials.SEssentialsCarousel.DataSource" />.
				</para>
				<para>
					Advanced Carousel Usage
				</para>
				<para>
					If you create a user defined carousel, the carousel will ask for the
					<see cref="M:ShinobiEssentials.SEssentialsCarousel.PositionOfItemAtOffset(System.Single)" /> and 
					<see cref="M:ShinobiEssentials.SEssentialsCarousel.TransformOfItemAtOffset(System.Single)" />
					of items in the carousel.
					These allow arbitrary positioning and transformations for advanced carousel users, by providing their own functions to
					calculate the position from the focus, rotation, and scaling of each item.
					The <c>offset</c> argument is the distance from the fixed focus point of the carousel.
					As the carousel pans through the items, the offset changes while the fixed point remains constant.
					For example, when the carousel first displays, the fixed point is at index 0, so the offset of each item is the same as their index;
					
					<img href="Offset0.png" />
				</para>
				<para>
					As the carousel begins panning through the items, the items move past the fixed point, and their offsets change.
					For example, in the example below, the fixed point maps to part way between index 0 and index 1, and the offset of
					all the items shifts accordingly;
					
					<img href="Offset06.png" />
				</para>
				<para>
					The <c>offset</c> argument is used primarily to calculate a given position and transform for an item, based on it's distance
					from the focus point of the carousel, as well as informing the <see cref="P:ShinobiEssentials.SEssentialsCarousel.Delegate" />
					of a layout of an item at a given offset, to allow for additional effects to be applied, such as fading the alpha based on
					distance from the focus of the carousel.
				</para>
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarousel.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarousel.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarousel.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarousel.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarousel.#ctor(System.Drawing.RectangleF)">
			<summary>
				Construct a carousel with a given frame.
			</summary>
			<remarks></remarks>
			<param name="frame">
				Frame to use.
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarousel.ContentOffset">
			<summary>
				The current offset through the carousel, measured in indices.
			</summary>
			<remarks>
				Defaults to <c>0</c>.
				<img href="ContentOffset.png" />
				If the carousel is focused on the view with index = 2, then the contentOffset is 2.
				May also be a non-integer value to display between items.
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarousel.SetContentOffset(System.Single,System.Boolean,System.Single)">
			<summary>
				Focuses the carousel on a new offset, with optional animation.
			</summary>
			<remarks>
				When using <c>SetContentOffset</c> without specifying <paramref name="animated" />,
				the carousel will appear at the new <paramref name="offset" /> without animating.
			</remarks>
			<param name="offset">The offset to focus the carousel on.</param>
			<param name="animated">Whether to animate to the new position, or snap straight there.</param>
			<param name="duration">The total duration of the animation.</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarousel.PanToItem(System.Int32,System.Boolean,System.Single)">
			<summary>
				Focuses the carousel on the item at the specified index, with optional animation.
			</summary>
			<remarks></remarks>
			<param name="index">
				The index of the item to focus on.
			</param>
			<param name="animated">
				Whether to animate to the new position, or snap straight there.
			</param>
			<param name="duration">
				The total duration of the animation.
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarousel.ConvertToOffset(System.Int32)">
			<summary>
				Converts an index to the nearest corresponding offset in the carousel.
			</summary>
			<remarks>
				In a wrapped carousel there are many offsets which correspond to a single index.
				This method returns the nearest offset which corresponds to the index specified.
			</remarks>
			<param name="index">
				The index to convert.
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarousel.ConvertToIndex(System.Single)">
			<summary>
				Converts an offset to the corresponding index.
			</summary>
			<remarks></remarks>
			<param name="offset">
				The offset to convert.
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarousel.FocusPointNormalized">
			<summary>
				The point in the carousel bounds to center items around.
			</summary>
			<remarks>
				Takes values between <c>0.0</c> and <c>1.0</c> for the x and y axes.
				Defaults to being in the center of the carousel <c>(0.5, 0.5)</c>.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarousel.CurrentItemInFocus">
			<summary>
				The item closest to the focus point of the carousel.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarousel.WrapItems">
			<summary>
				Controls if the Carousel will loop items.
			</summary>
			<remarks>
				<para>
					If <c>true</c>, the carousel loops by scrolling off one end, and onto the other.
					If <c>false</c>, the carousel stops upon reaching the end.
				</para>
				<para>
					If the total number of items in the carousel is less than
					<see cref="P:ShinobiEssentials.SEssentialsCarousel.MaxNumberOfItemsToDisplay" />, then the carousel will not wrap,
					regardless of whether <c>WrapItems</c> is set or not.
				</para>
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarousel.SnapToFocusPoint">
			<summary>
				Controls if the Carousel will always finish pans centered on an item.
			</summary>
			<remarks>
				If <c>true</c>, the carousel will always finish a pan gesture with an item centered on the focus point.
				If <c>false</c>, the carousel will not automatically center the items on the focus point.
				Defaults to <c>true</c>.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarousel.Bounces">
			<summary>
				Whether the carousel will bounce on reaching the end, or simply stop.
			</summary>
			<remarks>
				Defaults to <c>true</c>.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarousel.DataSource">
			<summary>
				The DataSource to call for fetching item content.
			</summary>
			<remarks>
				See the <see cref="T:ShinobiEssentials.SEssentialsCarouselDataSource" /> documentation for more information.
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarousel.ReloadData">
			<summary>
				Reloads all items by re-requesting them from the DataSource.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarousel.VisibleItems">
			<summary>
				The set of all currently visible items on the carousel.
			</summary>
			<remarks>
				Be aware that the indices of items may not match up to the indices of the items as requested through the <c>DataSource</c>.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarousel.Delegate">
			<summary>
				The delegate to call back to on specific events.
			</summary>
			<remarks>
				This is a strongly typed wrapped around <see cref="P:ShinobiEssentials.SEssentialsCarousel.WeakDelegate" />.
				See the <see cref="T:ShinobiEssentials.SEssentialsCarouselDelegate" /> documentation for more information.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarousel.WeakDelegate">
			<summary>
				The weak delegate to call back to on specific events.
			</summary>
			<remarks>
				See the <see cref="T:ShinobiEssentials.SEssentialsCarouselDelegate" /> documentation for more information.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarousel.FrictionCoefficient">
			<summary>
				How much friction to apply to the carousel.
			</summary>
			<remarks>
				A higher value will bring the carousel to a halt faster.
				Defaults to 1.0.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarousel.PanEnabled">
			<summary>
				Controls if the Carousel can be panned by the user.
			</summary>
			<remarks>
				If <c>true</c>, the carousel will respond to the pan gesture, if enough items have been added.
				If <c>false</c>, the carousel will not respond to panning.
				Defaults to <c>true</c>.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarousel.MaxNumberOfItemsToDisplay">
			<summary>
				The maximum number of on-screen items to display.
			</summary>
			<remarks>
				Defaults to <c>15</c>.
				May be more than the number of items, if the maximum value has not yet been reached.
				If less than the number of items, then only a subset of items around the focus point will be displayed at a time.
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarousel.RedrawCarousel">
			<summary>
				Force a layout of all items in the carousel.
			</summary>
			<remarks>
				Similar to <see cref="M:ShinobiEssentials.SEssentialsCarousel.ReloadData" />, but will not request new views from the <c>DataSource</c>.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarousel.MomentumAnimationCurve">
			<summary>
				The type of animation curve to use when panning the carousel. 
			</summary>
			<remarks>
				Defaults to <see cref="F:ShinobiEssentials.SEssentialsAnimationCurveType.EaseOut" />. 
				This curve is used during momentum after panning the carousel.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarousel.ProgrammaticAnimationCurve">
			<summary>
				The type of animation curve to use when programmatically changing the carousel offset.
			</summary>
			<remarks>
				Defaults to <see cref="F:ShinobiEssentials.SEssentialsAnimationCurveType.EaseOut" />.
				This curve is used when programmatically changing with
				<see cref="M:ShinobiEssentials.SEssentialsCarousel.SetContentOffset(System.Single,System.Boolean,System.Single)" />.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarousel.PanGestureFrame">
			<summary>
				Specifies a sub-area of the carousel bounds to allow panning.
			</summary>
			<remarks>
				If set to <c>RectangleF.Empty</c>, then the entire frame is used for gestures.
				Defaults to <c>RectangleF.Empty</c>.
				To turn off panning completely, refer to <see cref="P:ShinobiEssentials.SEssentialsCarousel.PanEnabled" />.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarousel.PanVector">
			<summary>
				Specifies the direction of forward panning, as a vector.
			</summary>
			<remarks>
				<para>
					Need not be a unit vector.
				</para>
				<para>
					To increase the <c>contentOffset</c> by panning right-to-left, the <c>panVector</c> would be <c>(1,0)</c>.
					For left-to-right, it would be <c>(-1,0)</c>.
					Likewise, for panning bottom-to-top, <c>panVector</c> would be <c>(0,1)</c>, and for top-to-bottom, <c>(0,-1)</c>.
				</para>
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarousel.PositionOfItemAtOffset(System.Single)">
			<summary>
				The position of an item at a given offset from the focus point of the carousel.
			</summary>
			<remarks>
				 For the base class, this is <c>PointF.Empty</c>, while the subclasses implement their own positioning.
				 For advanced users wanting custom layouts, this can be implemented to position the views as desired.
				 When used in combination with <see cref="M:ShinobiEssentials.SEssentialsCarousel.TransformOfItemAtOffset(System.Single)" />
				 the position is applied before the transform.
			</remarks>
			<param name="offset">
				The distance of the target item from the focus of the carousel.
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarousel.TransformOfItemAtOffset(System.Single)">
			<summary>
				The transform of a item (rotation, scaling and translation) at a given offset from the focus point of the carousel.
			</summary>
			<remarks>
				 For the base class, this is <c>CATransform3DIdentity</c>, while the subclasses implement their own transforms.
				 For advanced users wanting custom layouts, this can be implemented to transform the views as desired.
				 When used in combination with <see cref="M:ShinobiEssentials.SEssentialsCarousel.PositionOfItemAtOffset(System.Single)" />
				 the position is applied before the transform.
			</remarks>
			<param name="offset">
				The distance of the target item from the focus of the carousel.
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarousel.Dispose(System.Boolean)">
			<summary>
				Releases unmanaged resources.
			</summary>
			<remarks></remarks>
			<param name="disposing">
				True if called by Dispose, false if called from a finalizer
			</param>
		</member>
		
		
		<member name="T:ShinobiEssentials.SEssentialsCarouselCylindrical">
			<summary>
				An SEssentialsCarousel which displays all items on the surface of a cylinder.
			</summary>
			<remarks>
				<para>
					<img href="Cylindrical.png" />
					The carousel items are evenly spaced on the surface of the cylinder along an elliptical path.
					The width and depth of the elliptical path can be configured along with the spacing between items and tilt of the cylinder.
					Rotation, fading and clipping can also be applied to items.
				</para>
				<para>
					The width and depth of the cylinder are controlled by the <c>WidthRatio</c> and <c>DepthRatio</c> properties.
					The diagram below shows a top down view of the carousel and how these properties relate to the carousels size.
				</para>
				<para>
					<img href="CylindricalSizing.png" />
					The <c>SEssentialsCarouselCylindrical</c> inherits from the <c>SEssentialsCarousel</c> base class.
					The methods and properties on the base class can be used to control all other aspects of the carousels behavior.
				</para>
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselCylindrical.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselCylindrical.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselCylindrical.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselCylindrical.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselCylindrical.#ctor(System.Drawing.RectangleF)">
			<summary>
				Constructos a Cylindrical Carousel with a given frame.
			</summary>
			<remarks></remarks>
			<param name="frame">
				The Frame to use.
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselCylindrical.Orientation">
			<summary>
				Controls the orientation of the cylinder the items are laid out around.
			</summary>
			<remarks>
				<para>
					If <see cref="F:ShinobiEssentials.SEssentialsCarouselOrientation.Horizontal" />, items are laid out left-to-right.
					If <see cref="F:ShinobiEssentials.SEssentialsCarouselOrientation.Vertical" />, items are laid out top-to-bottom.
				</para>
				<para>
					Defaults to <see cref="F:ShinobiEssentials.SEssentialsCarouselOrientation.Horizontal" />.
				</para>
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselCylindrical.WidthRatio">
			<summary>
				This controls the width of the cylinder on which the items are placed.
			</summary>
			<remarks>
				<para>
					Must be a positive number.
					This value is the ratio of carousel width to frame width (or carousel height to frame height if
					<see cref="P:ShinobiEssentials.SEssentialsCarouselCylindrical.Orientation" /> is
					<see cref="F:ShinobiEssentials.SEssentialsCarouselOrientation.Vertical" />).
					Defaults to <c>1.0</c>.
				 </para>
				 <para>
					The <c>SEssentialsCarouselCylindrical</c> displays items on an elliptical path.
					The <c>WidthRatio</c> defines the distance from the center of the carousel to the left and right (or top and bottom
					if <c>Orientation</c> is set to <c>SEssentialsCarouselOrientation.Vertical</c>) edges of the carousel.
					To control the depth of the carousel use <c>DepthRatio</c>.
				 </para>
				 <para>
				 	A value of <c>1.0</c> draws the cylinder such that the edges of the cylinder touch the carousels frame.
				 	A value of less that <c>1.0</c> would make the edges of the cylinder lie inside the carousels frame.
				 	A value greater than <c>1.0</c> would make the edges of the cylinder lie outside the carousels frame
				 </para>
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselCylindrical.DepthRatio">
			<summary>
				This controls the depth of the cylinder on which the items are placed.
			</summary>
			<remarks>
				<para>
					Must be a positive number.
					This allows control over the scaling of items as they move towards the back of the carousel. 
					his value is the ratio of depth to the frame width (or height if
					<see cref="P:ShinobiEssentials.SEssentialsCarouselCylindrical.Orientation" /> is
					<see cref="F:ShinobiEssentials.SEssentialsCarouselOrientation.Vertical" />).
					Defaults to <c>1.0</c>.
				</para>
				<para>
					The <c>SEssentialsCarouselCylindrical</c> displays items on an elliptical path.
					The <c>DepthRatio</c> defines the distance from the center to the front and back of the carousel.
					To control the width of the carousel use <c>WidthRatio</c>.
				</para>
				<para>
					A value of <c>1.0</c> draws the cylinder such that the total depth is equal to the carousels frame size.
					A value of less that <c>1.0</c> draws the cylinder such that the total depth is less than the carousels frame size.
					A value greater than <c>1.0</c> draws the cylinder such that the total depth is greater than the carousels frame size.
				</para>
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselCylindrical.ItemSpacingFactor">
			<summary>
				This controls the spacing between the items in the carousel and is a positive number.
			</summary>
			<remarks>
				<para>
					Defaults to <c>1.1</c>.
				</para>
				<para>
					A value of <c>1.0</c> would result in items being arranged so that they are touching side by side.
					A value of less that <c>1.0</c> would cause the items to overlap.
					A value greater than <c>1.0</c> would spread the items out with spaces between them.
				</para>
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselCylindrical.FadeDepth">
			<summary>
				This controls the point where items in the carousel reach an alpha value equal to <c>FadeAlpha</c>.
			</summary>
			<remarks>
				<para>
					It is a positive number between <c>0.0</c> and <c>1.0</c>.
					Defaults to <c>0.9</c>. 
				</para>
				<para>
					A value of <c>1.0</c> would result in items at the back of the carousel having an alpha value of <c>FadeAlpha</c>.
					A value of <c>0.5</c> would result in all items from the back of the carousel to half through the carousel having
					an alpha value of <c>FadeAlpha</c>.
					A value of <c>0.0</c> would result in all items having an alpha value of <c>FadeAlpha</c>.
				</para>
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselCylindrical.FadeAlpha">
			<summary>
				Controls the minimum alpha value to apply to items in the carousel at the point specified by <c>FadeDepth</c>.
			</summary>
			<remarks>
				 It is a positive number between <c>0.0</c> and <c>1.0</c>.
				 Defaults to <c>0.0</c>.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselCylindrical.FrontFacing">
			<summary>
				Controls whether the items remain forwards facing as they travel around the cylinder.
			</summary>
			<remarks>
				<para>
					Defaults to <c>false</c>.
				</para>
				<para>
					If <c>true</c>, the items will not rotate as they move away from the focus point.
					If <c>false</c>, the items will rotate to lie tangential to the surface of the cylinder as they move away from the focus point.
				</para>
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselCylindrical.TiltFactor">
			<summary>
				This can be used to give the impression the camera is above or below the level of the items in the carousel.
			</summary>
			<remarks>
				<para>
					The value represents the gradient of the items as they move further from the focus point.
					Defaults to <c>0.5</c>.
				</para>
				<para>
					A value of <c>0.0</c> will result in the items being arranged in a straight line.
					A value of <c>1.0</c> will result in the items moving at 45 degrees upwards as they move further from the focus point.
					A value of <c>-1.0</c> will result in the items moving at 45 degrees downwards as they move further from the focus point.
				</para>
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselCylindrical.AdjustSpacingToFitVisibleItemsExactly">
			<summary>
				Adjust the item spacing to fit exactly the number of visible views around the circle.
			</summary>
			<remarks>
				This means that as one item disappears from view the next item appears in the same place on the circle and gives the
				illusion of items rotating seamlessly around.
			</remarks>
		</member>
		
		
		<member name="T:ShinobiEssentials.SEssentialsCarouselInverseCylindrical">
			<summary>
				An SEssentialsCarousel which displays all items on the surface of a cylinder.
			</summary>
			<remarks>
				<para>
					The items are viewed from the center of the carousel.
					<img href="InverseCylindrical.png" />
				</para>
				<para>
					The carousel items are evenly spaced on the circumference of the cylinder around the viewpoint.
					The cylinder radius and spacing of items can be configured. Once an item is rotated more than 90 degrees it is not displayed in the carousel.
				</para>
				<para>
					The majority of interactions with the <c>SEssentialsCarouselInverseCylindrical</c> will be done via the methods and properties on
					the <c>SEssentialsCarousel</c> abstract base class, with the properties of the <c>SEssentialsCarouselInverseCylindrical</c> class making small
					changes to the positioning of items.
				</para>
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselInverseCylindrical.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselInverseCylindrical.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselInverseCylindrical.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselInverseCylindrical.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselInverseCylindrical.#ctor(System.Drawing.RectangleF)">
			<summary>
				Construct a new InverseCylindrical Carousel with a given frame.
			</summary>
			<remarks></remarks>
			<param name="frame">
				The Frame to use.
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselInverseCylindrical.Orientation">
			<summary>
				Controls the orientation of the cylinder items are laid out on.
			</summary>
			<remarks>
				If <see cref="F:ShinobiEssentials.SEssentialsCarouselOrientation.Horizontal" />, items are laid out left-to-right.
				If <see cref="F:ShinobiEssentials.SEssentialsCarouselOrientation.Vertical" />, items are laid out top-to-bottom.
				Defaults to <see cref="F:ShinobiEssentials.SEssentialsCarouselOrientation.Horizontal" />.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselInverseCylindrical.ItemSpacingFactor">
			<summary>
				This controls the spacing between the items in the carousel and is a positive number.
			</summary>
			<remarks>
				<para>
					Defaults to <c>1.0</c>.
				</para>
				<para>
					A value of <c>1.0</c> would result in items being arranged so that they are touching side by side.
					A value of less that <c>1.0</c> would cause the items to overlap.
					A value greater than <c>1.0</c> would spread the items out with spaces between them.
				</para>
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselInverseCylindrical.Radius">
			<summary>
				This controls the radius of the cylinder on which the items are placed and is a positive number.
			</summary>
			<remarks>
				<para>
					This value is multiplied by half the frame width or height to give the radius of the cylinder.
					Defaults to <c>1.0</c>.
				</para>
				<para>
					A value of <c>1.0</c> draws the cylinder such that the edges of the cylinder touch the carousels frame.
					A value of less that <c>1.0</c> would make the edges of the cylinder lie inside the carousels frame.
					A value greater than <c>1.0</c> would make the edges of the cylinder lie outside the carousels frame.
				</para>
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselInverseCylindrical.FadeDepth">
			<summary>
				This controls the point where items in the carousel reach an alpha value equal to <c>FadeAlpha</c>.
			</summary>
			<remarks>
				<para>
					It is a positive number between <c>0.0</c> and <c>1.0</c>.
					Defaults to <c>0.75</c>.
				</para>
				<para>
					A value of <c>1.0</c> would result in items at the front of the carousel having an alpha value of <c>FadeAlpha</c>.
					A value of <c>0.5</c> would result in all items from the front of the carousel to half through the carousel
					having an alpha value of <c>FadeAlpha</c>.
					A value of <c>0.0</c> would result in all items having an alpha value of <c>FadeAlpha</c>.
				</para>
				<para>
					Note that the front of the carousel is defined as the side closest to the screen.
				</para>
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselInverseCylindrical.FadeAlpha">
			<summary>
				Controls the minimum alpha value to apply to items in the carousel at the point specified by <c>fadeDepth</c>.
			</summary>
			<remarks>
				It is a positive number between <c>0.0</c> and <c>1.0</c>.
				Defaults to <c>0.0</c>.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselInverseCylindrical.TiltFactor">
			<summary>
				This can be used to give the impression the camera is above or below the level of the items in the carousel.
			</summary>
			<remarks>
				<para>
					The value represents the gradient of the items as they move further from the focus point.
					Defaults to <c>0.0</c>.
				</para>
				<para>
					A value of <c>0.0</c> will result in the items being arranged in a straight line.
					A value of <c>1.0</c> will result in the items moving at 45 degrees downwards as they move further from the focus point.
					A value of <c>-1.0</c> will result in the items moving at 45 degrees upwards as they move further from the focus point.
				</para>
			</remarks>
		</member>
		
		
		<member name="T:ShinobiEssentials.SEssentialsCarouselLinear2D">
			<summary>
				An SEssentialsCarousel which displays all items in a line, either with horizontal or vertical alignment, with a constant spacing between items.
			</summary>
			<remarks>
				<para>
					<img href="Linear2D.png" />
					The <c>SEssentialsCarouselLinear2D</c> allows for changes in layout specific to a linear display.
					To control other aspects of the carousel, including item management, wrapping, and gestures, use the methods and properties
					on the <c>SEssentialsCarousel</c> abstract base class.
				</para>
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselLinear2D.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselLinear2D.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselLinear2D.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselLinear2D.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselLinear2D.#ctor(System.Drawing.RectangleF)">
			<summary>
				Construct a new Linear2D Carousel with a given frame.
			</summary>
			<remarks></remarks>
			<param name="frame">
				The Frame to use.
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselLinear2D.Orientation">
			<summary>
				Controls the direction the items are laid out in.
			</summary>
			<remarks>
				If <see cref="F:ShinobiEssentials.SEssentialsCarouselOrientation.Horizontal" />, items are laid out left-to-right.
				If <see cref="F:ShinobiEssentials.SEssentialsCarouselOrientation.Vertical" />, items are laid out top-to-bottom.
				Defaults to <see cref="F:ShinobiEssentials.SEssentialsCarouselOrientation.Horizontal" />.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselLinear2D.ItemSpacing">
			<summary>
				The amount of spacing to use between the edges of adjacent items, measured in points.
			</summary>
			<remarks>
				This assumes all items are equally sized.
				Defaults to <c>5</c> pts.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselLinear2D.AllItemsCanReachFocusPoint">
			<summary>
				Whether the carousel will allow the first and last items to move to the focus point, or to have them constrained to the edges of the carousel.
			</summary>
			<remarks>
				If <c>true</c>, the carousel will allow the items to settle at the focus point.
				If <c>false</c>, the items will be constrained so they cannot move more than
				<see cref="P:ShinobiEssentials.SEssentialsCarouselLinear2D.CarouselInset" /> pixels away from the edges of the carousel.
				Defaults to <c>true</c>.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselLinear2D.CarouselInset">
			<summary>
				The maximum amount of whitespace to display on either side of the carousel, when the carousel is not wrapped.
			</summary>
			<remarks>
				Defaults to <c>5</c> pts.
			</remarks>
		</member>
		
		
		<member name="T:ShinobiEssentials.SEssentialsCarouselLinear3D">
			<summary>
				An SEssentialsCarousel which displays all items in a line with perspective scaling as the items move further from the focus point.
			</summary>
			<remarks>
				<para>
					The alignment and spacing of items can be configured.
					<img href="Linear3D.png" />
				</para>
				<para>
					The majority of interactions with the <c>SEssentialsCarouselLinear3D</c> will be done via the methods and properties on the
					<c>SEssentialsCarousel</c> abstract base class, with the properties of the <c>SEssentialsCarouselLinear3D</c> making small changes
					to the positioning of items.
				</para>
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselLinear3D.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselLinear3D.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselLinear3D.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselLinear3D.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselLinear3D.#ctor(System.Drawing.RectangleF)">
			<summary>
				Construct a new Linear3D Carousel with a given frame.
			</summary>
			<remarks></remarks>
			<param name="frame">
				The Frame to use.
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselLinear3D.Orientation">
			<summary>
				Controls the direction the items are laid out in.
			</summary>
			<remarks>
				If <see cref="F:ShinobiEssentials.SEssentialsCarouselOrientation.Horizontal" />, items are laid out left-to-right.
				If <see cref="F:ShinobiEssentials.SEssentialsCarouselOrientation.Vertical" />, items are laid out top-to-bottom.
				Defaults to <see cref="F:ShinobiEssentials.SEssentialsCarouselOrientation.Horizontal" />.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselLinear3D.ScaleFactor">
			<summary>
				This controls how much the items shrink or grow as they move away from the focus point and can be used to control the illusion of perspective.
			</summary>
			<remarks>
				It is a positive number representing the scale relative to the original item size that the item will be as it moves one index
				further away from the focus point.
				Defaults to <c>0.8</c>.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselLinear3D.TiltFactor">
			<summary>
				This can be used to give the impression the camera is above or below the level of the items in the carousel.
			</summary>
			<remarks>
				<para>
					The value represents the gradient of the items as they move further from the focus point.
					Defaults to <c>0.05</c>.
				</para>
				<para>
					A value of <c>0</c> will result in the items arranged in a straight line.
					A value of <c>1.0</c> will result in the items moving at 45 degrees upwards as they move further from the focus.
					A value of <c>-1.0</c> will result in the items moving at 45 degrees downwards.
				</para>
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselLinear3D.ItemSpacingFactor">
			<summary>
				This controls the spacing between the items in the carousel and is a positive number.
			</summary>
			<remarks>
				<para>
					Defaults to <c>0.9</c>.
				</para>
				<para>
					A value of <c>1.0</c> would result in items being arranged so that they are touching side by side.
					A value of less that <c>1</c> would cause the items to overlap.
					A value greater than <c>1</c> would spread the items out with spaces between them.
				</para>
			</remarks>
		</member>
		
		
		<member name="T:ShinobiEssentials.SEssentialsCarouselOrientation">
			<summary>
				Used to control the direction items on a Carousel are laid out in.
			</summary>
			<remarks>
				Used by various Carousels such as <see cref="P:ShinobiEssentials.SEssentialsCarouselCylindrical.Orientation" />
				and <see cref="P:ShinobiEssentials.SEssentialsCarouselLinear2D.Orientation" /> to control the direction elements are laid out in.
			</remarks>
		</member>
		
		
		<member name="F:ShinobiEssentials.SEssentialsCarouselOrientation.Horizontal">
			<summary>
				Items are laid out left to right.
			</summary>
		</member>
		
		
		<member name="F:ShinobiEssentials.SEssentialsCarouselOrientation.Vertical">
			<summary>
				Items are laid out top to bottom.
			</summary>
		</member>
		
		
		<member name="T:ShinobiEssentials.SEssentialsCarouselRadial">
			<summary>
				An SEssentialsCarousel which displays all items in a circular layout.
			</summary>
			<remarks>
				<para>
					<img href="Radial.png" />
					The carousel items are evenly spaced on the circumference of the circle, arranged like a dial.
					The radius and spacing of items can be configured as well as the orientation of the items as they move around the circle.
				</para>
				<para>
					There are many more methods and properties on the <c>SEssentialsCarousel</c> base class to control all other aspects of the carousels behavior.
				</para>
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselRadial.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselRadial.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselRadial.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselRadial.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselRadial.#ctor(System.Drawing.RectangleF)">
			<summary>
				Construct a new Radial Carousel with a given frame.
			</summary>
			<remarks></remarks>
			<param name="frame">
				The Frame to use.
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselRadial.ItemSpacingFactor">
			<summary>
				This controls the spacing between the items in the carousel and is a positive number.
			</summary>
			<remarks>
				<para>
					Defaults to <c>1.2</c>.
				</para>
				<para>
					A value of <c>1.0</c> would result in items being arranged so that they are touching side by side around the circle.
					A value of less that <c>1.0</c> would cause the items to overlap.
					A value greater than <c>1.0</c> would spread the items out with spaces between them.
				</para>
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselRadial.Radius">
			<summary>
				This controls the radius of the circle on which the items are placed and is a ratio relative to the width of the frame.
			</summary>
			<remarks>
				Defaults to <c>2</c>.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselRadial.FocusPointAngle">
			<summary>
				Specified in radians this controls at which angle the focus point lies.
			</summary>
			<remarks>
				<para>
					Defaults to <c>0</c>.
					Since the focus point (<see cref="P:ShinobiEssentials.SEssentialsCarousel.FocusPointNormalized" />) defines where the
					item in focus will be on screen the focus point angle will control how the circle is rendered relative to that point.
				</para>
				<para>
					A value of <c>0</c> would result in the focus point being at the top of the circle.
					A value of <c>1.0 * M_PI_2</c> would move the focus point to the right of the circle.
					A value of <c>2.0 * M_PI_2</c> would move the focus point to the bottom of the circle.
					A value of <c>3.0 * M_PI_2</c> would move the focus point to the left of the circle.
				</para>
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselRadial.ItemsRotate">
			<summary>
				This controls whether items rotate as they move around the circle.
			</summary>
			<remarks>
				<para>
					Defaults to <c>false</c>.
				</para>
				<para>
					A value of <c>true</c> would result in each item rotating as it moves around the circle.
					A value of <c>false</c> means that all items remain upright as they move around the circle.
				</para>
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselRadial.ScaleFactor">
			<summary>
				This controls how much the items shrink or grow as they move away from the focus point.
			</summary>
			<remarks>
				<para>
					Defaults to <c>0.8</c>.
				</para>
				<para>
					It is a positive number representing the scale relative to the original item size that the item will be as it moves
					one index further away from the focus point.
					To remove all scaling effects set this to <c>1.0</c>.
					If you only wish the item in focus to appear larger than the other items see the <c>scaleAllItems</c> property.
				</para>
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselRadial.OnlyScaleItemInFocus">
			<summary>
				This controls how scaling (see <see cref="P:ShinobiEssentials.SEssentialsCarouselRadial.ScaleFactor" />) is applied.
			</summary>
			<remarks>
				<para>
					Defaults to <c>true</c>.
				</para>
				<para>
					A value of <c>true</c> means that all items not in focus are scaled equally relative to the item in focus.
					<img href="RadialNonScalingThumb.png" />
				</para>
				<para>
					A value of <c>false</c> would result in each successive item being scaled as they move further from the focus point.
					<img href="RadialScalingThumb.png" />
				</para>
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselRadial.CenterCircle(System.Drawing.PointF,System.Drawing.PointF)">
			<summary>
				Adjust the parameters of the carousel to center the circle at given position.
			</summary>
			<remarks>
				A helper method that adjusts the <see cref="P:ShinobiEssentials.SEssentialsCarouselRadial.FocusPointAngle" /> and
				<see cref="P:ShinobiEssentials.SEssentialsCarouselRadial.Radius" /> to fit a circle to the given constraint.
				The position is supplied as a normalized coordinate where the x and y values are ratios of the width and height.
			</remarks>
			<param name="normalizedCirclePosition">
				The normalized position of the center of the circle path along which items move.
			</param>
			<param name="normalizedFocusPosition">
				The normalized position of the item in focus when the carousel is at rest.
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselRadial.CenterCircle(System.Drawing.PointF,System.Single,System.Single)">
			<summary>
				Adjust the parameters of the carousel to center the circle at given position.
			</summary>
			<remarks>
				A helper method that adjusts the <see cref="P:ShinobiEssentials.SEssentialsCarouselRadial.FocusPointAngle" />
				position to fit a circle to the given constraint.
				The position is supplied as a normalized coordinate where the x and y values are ratios of the width and height.
			</remarks>
			<param name="normalizedCirclePosition">
				The normalized position of the center of the circle path along which items move.
			</param>
			<param name="angle">
				Specified in radians this controls at which angle the focus point lies.
			</param>
			<param name="normalizedRadius">
				The radius relative to the width of the carousel.
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselRadial.AdjustSpacingToFitVisibleItemsExactly">
			<summary>
				Adjust the item spacing to fit exactly the number of visible views around the circle.
			</summary>
			<remarks>
				This means that as one item disappears from view the next item appears in the same place on the circle and gives the
				illusion of items rotating seamlessly around.
			</remarks>
		</member>
		
		
		<member name="T:ShinobiEssentials.SEssentialsCoverFlow">
			<summary>
				An SEssentialsCarousel which displays all items in a line, either with horizontal or vertical alignment.
			</summary>
			<remarks>
				<para>
					Off-center items have a constant spacing between centers (<see cref="P:ShinobiEssentials.SEssentialsCoverFlow.ItemSpacing" />),
					and the item in focus has padding around it (<see cref="P:ShinobiEssentials.SEssentialsCoverFlow.CenterItemPadding" />).
					The items to the left of the center are rotated left, and the items to the right rotated right, with the center item facing forwards.
					<img href="CoverFlow.png" />
				</para>
				<para>
					The majority of interactions with the <c>SEssentialsCoverFlow</c> will be done via the methods and properties on the <c>SEssentialsCarousel</c>
					abstract base class, with the properties of the <c>SEssentialsCoverFlow</c> making small changes to the positioning of items.
				</para>
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCoverFlow.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCoverFlow.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCoverFlow.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCoverFlow.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCoverFlow.#ctor(System.Drawing.RectangleF)">
			<summary>
				Construct a new CoverFlow Carousel with a given frame.
			</summary>
			<remarks></remarks>
			<param name="frame">
				The Frame to use.
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCoverFlow.Orientation">
			<summary>
				Controls the orientation of the carousel.
			</summary>
			<remarks>
				If <see cref="F:ShinobiEssentials.SEssentialsCarouselOrientation.Horizontal" />, items are laid out left-to-right.
				If <see cref="F:ShinobiEssentials.SEssentialsCarouselOrientation.Vertical" />, items are laid out top-to-bottom.
				Defaults to <see cref="F:ShinobiEssentials.SEssentialsCarouselOrientation.Horizontal" />.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCoverFlow.ItemSpacing">
			<summary>
				The amount of spacing to use between the centers of all off-center items, measured in points.
			</summary>
			<remarks>
				Defaults to <c>65</c> pts.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCoverFlow.CenterItemPadding">
			<summary>
				The distance between the edge of the focused item, and the center of the nearest off-center item, measured in points.
			</summary>
			<remarks>
				Defaults to <c>70</c> pts.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCoverFlow.ScaleFactor">
			<summary>
				The scale of off-center items, in comparison to the center item, as a positive value.
			</summary>
			<remarks>
				All off-center items will be the same scale, until moved to the center when they will scale to 1.
				Defaults to <c>0.9</c>.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCoverFlow.FrontFacingFactor">
			<summary>
				The percentage time the focused item remains front-facing while the carousel is panning, before the item rotates away and moves out of focus.
			</summary>
			<remarks>
				At <c>0</c>, the item will always rotate as the carousel pans, and at <c>1</c>, the item will not rotate until a new item is centered.
				Defaults to <c>0.2</c>.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCoverFlow.RotateFactor">
			<summary>
				The rotation applied to the off-center items.
			</summary>
			<remarks>
				At <c>0</c>, all items face forwards.
				At <c>1</c>, all items are turned perpendicular to the viewer, facing inwards, and at <c>-1</c> all items are perpendicular facing outwards.
				Defaults to <c>0.3</c>.
			</remarks>
		</member>
		
		
		<member name="T:ShinobiEssentials.SEssentialsCarouselDataSource">
			<summary>
				The SEssentialsCarouselDataSource provides an SEssentialsCarousel with it's content, and information about the content.
			</summary>
			<remarks>
				The Carousel fetches items from the DataSource as they become visible.
				This may be a long time after they were originally added to the Carousel, if they would have been added off screen.
				As a general rule all views supplied by the DataSource should be equally sized, this will result in a nicely spaced carousel.
				If views of varying sizes are supplied then the carousel will still function but views may overlap and have uneven spacing.
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselDataSource.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselDataSource.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselDataSource.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselDataSource.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselDataSource.#ctor">
			<summary>
				Default constructor.
			</summary>
			<remarks></remarks>
		</member>
			
		<member name="M:ShinobiEssentials.SEssentialsCarouselDataSource.ConformsToProtocol(System.IntPtr)">
			<summary>
				Checks whether this object conforms to a protocol.
			</summary>
			<remarks>
				Not normally called from application code - used by the Shinobi framework.
			</remarks>
			<param name="protocol">
				The protocol
			</param>
			<returns>
				<c>true</c> if the object conforms to the protocol.
			</returns>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselDataSource.GetItem(ShinobiEssentials.SEssentialsCarousel,System.Int32)">
			<summary>
				Return an item at a given absolute index.
			</summary>
			<remarks>
				 Note that the size of the item when displayed in the carousel is determined by the size of the view returned here.
				 The item at the focus point of the carousel will be guaranteed to match exactly the size of the view supplied, views for
				 items off focus may be transformed and appear larger or smaller depending on the carousel type.
			</remarks>
			<param name="carousel">
				The parent carousel.
			</param>
			<param name="index">
				The index of the requested item in the carousel.
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselDataSource.NumberOfItems(ShinobiEssentials.SEssentialsCarousel)">
			<summary>
				The total number of items in the carousel (visible and off-screen included).
			</summary>
			<remarks></remarks>
			<param name="carousel">
				The parent carousel
			</param>
		</member>
		
		
		<member name="T:ShinobiEssentials.SEssentialsCarouselDelegate">
			<summary>
				Delegate class for an SEssentialsCarousel.
			</summary>
			<remarks>
				<para>
					The SEssentialsCarouselDelegate defines methods which allow you to manage the appearance and modification of items,
					and the UI interactions with the SEssentialsCarousel.
					It offers control over and notifications regarding;
					<list type="bullet">
						<item>
							<term>Items appearing or disappearing</term>
						</item>
						<item>
							<term>Modifications to items</term>
						</item>
						<item>
							<term>Scrolling of the Carousel</term>
						</item>
					</list>
				</para>
				<para>
					The <c>offset</c> argument is the distance from the fixed focus point of the carousel.
					As the carousel pans through the items, the offset changes while the fixed point remains constant.
					For example, when the carousel first displays, the fixed point is at index 0, so the offset of each item is the same as their index;
					<img href="Offset0.png" />
				</para>
				<para>
					As the carousel begins panning through the items, the items move past the fixed point, and their offsets change.
					For example, in the example below, the fixed point maps to part way between index 0 and index 1, and the offset of all the
					items shifts accordingly;
					<img href="Offset06.png" />
				</para>
				<para>
					The <c>offset</c> argument is used primarily to calculate a given position and transform for an item, based on
					it's distance from the focus point of the carousel, as well as informing the <c>Delegate</c> of a layout of an item at a given offset,
					to allow for additional effects to be applied, such as fading the alpha based on distance from the focus of the carousel.
				</para>
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselDelegate.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselDelegate.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselDelegate.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsCarouselDelegate.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselDelegate.#ctor">
			<summary>
				Default constructor.
			</summary>
			<remarks></remarks>
		</member>
			
		<member name="M:ShinobiEssentials.SEssentialsCarouselDelegate.ConformsToProtocol(System.IntPtr)">
			<summary>
				Checks whether this object conforms to a protocol.
			</summary>
			<remarks>
				Not normally called from application code - used by the Shinobi framework.
			</remarks>
			<param name="protocol">
				The protocol
			</param>
			<returns>
				<c>true</c> if the object conforms to the protocol.
			</returns>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselDelegate.WillLayoutItem(ShinobiEssentials.SEssentialsCarousel,MonoTouch.UIKit.UIView,System.Single)">
			<summary>
				Informs the delegate that an item will be moved, and allows for any additional modifications
				(E.g. alpha level, background color or zPosition).
			</summary>
			<remarks></remarks>
			<param name="carousel">
				The parent carousel.
			</param>
			<param name="item">
				The target item to be modified.
			</param>
			<param name="offset">
				The distance of the target item from the center of the carousel.
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselDelegate.DidLayoutItem(ShinobiEssentials.SEssentialsCarousel,MonoTouch.UIKit.UIView,System.Single)">
			<summary>
				Informs the delegate that an item has been moved, and allows for any additional modifications
				(E.g. alpha level, background color or zPosition).
			</summary>
			<remarks></remarks>
			<param name="carousel">
				The parent carousel.
			</param>
			<param name="item">
				The target item to be modified.
			</param>
			<param name="offset">
				The distance of the target item from the center of the carousel.
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselDelegate.WillScroll(ShinobiEssentials.SEssentialsCarousel)">
			<summary>
				Informs the delegate that the carousel is about to begin scrolling.
			</summary>
			<remarks>
				This callback is only made on receiving a gesture.
				This will not be called if scrolling programmatically.
			</remarks>
			<param name="carousel">
				The parent carousel.
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselDelegate.IsScrolling(ShinobiEssentials.SEssentialsCarousel)">
			<summary>
				Informs the delegate that the carousel is part way through scrolling.
			</summary>
			<remarks>
				The <see cref="P:ShinobiEssentials.SEssentialsCarousel.ContentOffset" /> will be updated before this callback is made,
				and can be queried for the current offset.
				This callback will not trigger when programmatically moving without animation.
			</remarks>
			<param name="carousel">
				The parent carousel.
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselDelegate.WillDecelerate(ShinobiEssentials.SEssentialsCarousel)">
			<summary>
				Informs the delegate that the carousel has begun decelerating under friction.
			</summary>
			<remarks>
				This callback is only after a gesture completes.
				This will not be called if scrolling programmatically.
			</remarks>
			<param name="carousel">
				The parent carousel.
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselDelegate.DidFinishScrolling(ShinobiEssentials.SEssentialsCarousel,System.Single)">
			<summary>
				Informs the delegate that the carousel has scrolled to a new offset.
			</summary>
			<remarks>
				This callback will be called both for gestures and programmatic scrolling, with or without animation.
			</remarks>
			<param name="carousel">
				The parent carousel
			</param>
			<param name="offset">
				The new offset the carousel has scrolled to.
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselDelegate.WillDisplayItem(ShinobiEssentials.SEssentialsCarousel,MonoTouch.UIKit.UIView,System.Single)">
			<summary>
				Informs the delegate that an item will appear on screen.
			</summary>
			<remarks></remarks>
			<param name="carousel">
				The parent carousel.
			</param>
			<param name="item">
				The target item to be shown.
			</param>
			<param name="offset">
				The distance of the target item from the center of the carousel.
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselDelegate.DidDisplayItem(ShinobiEssentials.SEssentialsCarousel,MonoTouch.UIKit.UIView,System.Single)">
			<summary>
				Informs the delegate that an item has appeared on screen.
			</summary>
			<remarks></remarks>
			<param name="carousel">
				The parent carousel.
			</param>
			<param name="item">
				The target item to be shown.
			</param>
			<param name="offset">
				The distance of the target item from the center of the carousel.
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselDelegate.WillEndDisplayingItem(ShinobiEssentials.SEssentialsCarousel,MonoTouch.UIKit.UIView,System.Single)">
			<summary>
				Informs the delegate that an item will disappear, usually because it has scrolled off screen.
			</summary>
			<remarks></remarks>
			<param name="carousel">
				The parent carousel.
			</param>
			<param name="item">
				The target item to be hidden.
			</param>
			<param name="offset">
				The distance of the target item from the center of the carousel.
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselDelegate.DidEndDisplayingItem(ShinobiEssentials.SEssentialsCarousel,MonoTouch.UIKit.UIView,System.Single)">
			<summary>
				Informs the delegate that an item disappeared, usually because it has scrolled off screen
			</summary>
			<remarks></remarks>
			<param name="carousel">
				The parent carousel.
			</param>
			<param name="item">
				The target item to be hidden.
			</param>
			<param name="offset">
				The distance of the target item from the center of the carousel.
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsCarouselDelegate.DidTapItem(ShinobiEssentials.SEssentialsCarousel,MonoTouch.UIKit.UIView,System.Single)">
			<summary>
				Informs the delegate that an item has been tapped.
			</summary>
			<remarks></remarks>
			<param name="carousel">
				The parent carousel.
			</param>
			<param name="item">
				The item that has been tapped.
			</param>
			<param name="offset">
				The offset of the tapped item.
			</param>
		</member>
			
	
	    <member name="T:ShinobiEssentials.SEssentialsOverflowDropdownView">
			<summary>Tab control to access excess tabs</summary>
			<remarks>When there are more tabs than can be rendered on screen this class is called when the excess tabs button is pressed and can be overridden to control the style of the drop down selector.</remarks>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsOverflowDropdownView.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsOverflowDropdownView.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsOverflowDropdownView.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsOverflowDropdownView.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsOverflowDropdownView.#ctor(System.Drawing.RectangleF)">
			<summary>Initialize view with the specified frame rectangle.</summary>
			<param name="frame">Frame rectangle defining views extent</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsOverflowDropdownView.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsOverflowDropdownView.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsOverflowDropdownView.ConformsToProtocol(System.IntPtr)">
	      <summary>Checks whether this object conforms to a protocol.
	      </summary>
		  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
		  <param name="protocol">The protocol</param>
		  <returns>True if the object conforms to the protocol</returns>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsOverflowDropdownView.Items">
			<summary>An array of the tabs in the tabbed view</summary>
			<remarks>It is used to display the rows in the drop down table.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsOverflowDropdownView.ParentTabbedView">
			<summary>The source SEssentialsTabbedView is stored in this property</summary>
			<remarks>This is set automatically when the SEssentialsOverflowDropdownView is added to the SEssentialsTabbedView, which will probably have been added to a parent view with AddSubview. 
			If you set it explicitly it is your responsibility to hold a reference to the TabbedView (AddSubview will have done this for you), to avoid it being garbage collected. 
			This property does not itself do this for you (unlike most properties in the API) to match the behavior of the native code.
			</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsOverflowDropdownView.TableView">
			<summary>The list of tabs is displayed in this table</summary>
	    </member>

	    <member name="M:ShinobiEssentials.SEssentialsOverflowDropdownView.DidSelectRow(MonoTouch.UIKit.UITableView,MonoTouch.Foundation.NSIndexPath)">
	    	<summary></summary>
	    	<param></param>
	    	<param></param>
	    </member>
						
	    <member name="M:ShinobiEssentials.SEssentialsOverflowDropdownView.DropdownFrame">
	    	<summary></summary>
	    </member>
						
	    <member name="M:ShinobiEssentials.SEssentialsOverflowDropdownView.GetCell(MonoTouch.UIKit.UITableView,MonoTouch.Foundation.NSIndexPath)">
	    	<summary></summary>
	    	<param></param>
	    	<param></param>
	    </member>
						
	    <member name="M:ShinobiEssentials.SEssentialsOverflowDropdownView.NumberOfRows(MonoTouch.UIKit.UITableView,System.Int32)">
	    	<summary></summary>
	    	<param></param>
	    </member>
						
	    <member name="M:ShinobiEssentials.SEssentialsOverflowDropdownView.NumberOfSections(MonoTouch.UIKit.UITableView)">
	    	<summary></summary>
	    	<param></param>
	    </member>


		<member name="T:ShinobiEssentials.SEssentialsAnimationType">
			<summary>Animation type options: Linear, Sweep, FromTop, User</summary>
			<remarks>
				Used by <see cref="P:ShinobiEssentials.SEssentialsFlowLayout.AnimationType" />
			</remarks>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsAnimationType.FromTop">
			<summary>Views animate from the top.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsAnimationType.Linear">
			<summary>Views animate linearly.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsAnimationType.Sweep">
			<summary>Views aniamte in a sweeping motion.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsAnimationType.User">
			<summary>Views animate in a user defined motion.</summary>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsDecoratedCachedView">
			<summary>
				The SEssentialsDecoratedCachedView creates a view that is a cached image of the view supplied.
			</summary>
			<remarks>
				<para>
					This can often be used to improve the speed of a carousel since it only has to transform an image and not a complex view.
				</para>
				<para>
					To use a drop shadow effect without slowing down the framerate of a carousel use the following code in your DataSource:
				</para>
				<para>
					<code>UIView original = new UIView (frame);
original.Layer.ShadowRadius = 5;
SEssentialsDecoratedCachedView cachedView = new SEssentialsDecoratedCachedView (original, new UIEdgeInsets(5, 5, 5, 5));</code>
				</para>
				<para>
					Note: complex effects that use layer masks or OpenGL will not be cached by this class.
				</para>
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedCachedView.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedCachedView.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedCachedView.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsDecoratedCachedView.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsDecoratedCachedView.CachedView">
			<summary>
				The image view which is formed from view supplied in the constructor.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedCachedView.#ctor(MonoTouch.UIKit.UIView,MonoTouch.UIKit.UIEdgeInsets)">
			<summary>
				Create an <see cref="T:ShinobiEssentials.SEssentialsDecoratedView" /> from a view by capturing the image.
			</summary>
			<remarks></remarks>
			<param name="view">
				The view to be cached
			</param>
			<param name="margin">
				How much to extend the view frame, typically to capture drop shadow.
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedCachedView.RefreshCachedView">
			<summary>
				Refresh the cached image from the view.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedCachedView.Dispose(System.Boolean)">
			<summary>
				Releases unmanaged resources.
			</summary>
			<remarks></remarks>
			<param name="disposing">
				True if called by Dispose, false if called from a finalizer.
			</param>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsDecoratedDoubleSidedView">
			<summary>
				The SEssentialsDecoratedDoubleSidedView creates a view that is double sided, i.e. is will display a different view when rotated away from the camera.
			</summary>
			<remarks>
				If you imagine a playing card with a 'pattern' on the rear and 'suit' on the front the following code would be used.
				
				<code>SEssentialsDecoratedDoubleSidedView doubleView = new SEssentialsDecoratedDoubleSidedView(suit, pattern);</code>
				
				This is useful when the view is placed as an item in a 3D carousel and you do not want the contents to show through as they rotate away from the camera.
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedDoubleSidedView.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedDoubleSidedView.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedDoubleSidedView.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsDecoratedDoubleSidedView.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsDecoratedDoubleSidedView.BackView">
			<summary>
				The view which is shown when the main view faces away from the camera.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsDecoratedDoubleSidedView.ShowFront">
			<summary>
				Shows either front or back view.
			</summary>
			<remarks>
				Defaults to <c>true</c>.
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedDoubleSidedView.#ctor(MonoTouch.UIKit.UIView,MonoTouch.UIKit.UIView)">
			<summary>
				Create an SEssentialsDecoratedView with a view and backView.
			</summary>
			<remarks></remarks>
			<param name="view">
				The forward facing view.
			</param>
			<param name="backView">
				The back facing view.
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedDoubleSidedView.Dispose(System.Boolean)">
			<summary>
				Releases unmanaged resources.
			</summary>
			<remarks></remarks>
			<param name="disposing">
				True if called by Dispose, false if called from a finalizer.
			</param>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsDecoratedFadedView">
			<summary>
				The SEssentialsDecoratedShadowedView applies a gradual fade towards the edges of the view.
			</summary>
			<remarks>
				<img href="DecoratedFaded.png" />
				A faded view with default settings can be created, then further customized as;
				<code>SEssentialsDecoratedFadedView fadedView = new SEssentialsDecoratedFadedView(view)
{
	FadeLength = 20.f,
	FadeAlpha = 0.2f
};</code>
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedFadedView.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedFadedView.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedFadedView.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsDecoratedFadedView.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedFadedView.#ctor(MonoTouch.UIKit.UIView)">
			<summary>
				Construct a faded view around the given view.
			</summary>
			<remarks></remarks>
			<param name="view">
				The view to wrap in the faded view.
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsDecoratedFadedView.FadeLength">
			<summary>
				The length of the faded section, in points.
			</summary>
			<remarks>
				Defaults to <c>50</c> pts.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsDecoratedFadedView.FadeAlpha">
			<summary>
				The alpha value of the fade at the edges, between <c>0</c> and <c>1</c>.
			</summary>
			<remarks>
				Defaults to <c>0</c>.
			</remarks>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsDecoratedReflectedView">
			<summary>
				The SEssentialsDecoratedReflectedView adds a reflection underneath the wrapped UIView.
			</summary>
			<remarks>
				<img href="DecoratedReflective.png" />
				A reflected view with default settings can be created, then further customized as;
				<code>SEssentialsDecoratedReflectedView reflectedView = new SEssentialsDecoratedReflectedView(view)
{
	Offset = 10.f,
	Scale = 0.8f
};</code>
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedReflectedView.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedReflectedView.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedReflectedView.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsDecoratedReflectedView.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedReflectedView.#ctor(MonoTouch.UIKit.UIView)">
			<summary>
				Constructs a new reflected view around the given view.
			</summary>
			<remarks></remarks>
			<param name="view">
				The view to wrap in the reflected view.
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsDecoratedReflectedView.Offset">
			<summary>
				The height of the view above its reflection, in points.
			</summary>
			<remarks>
				Defaults to <c>0</c> pts.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsDecoratedReflectedView.Scale">
			<summary>
				How stretched or squashed the reflection is, in comparison to the original item.
			</summary>
			<remarks>
				At <c>0.5</c>, the reflection would be half the height of the original view.
				Defaults to <c>1</c>.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsDecoratedReflectedView.FadeHeight">
			<summary>
				How much of the reflection to display before fading to transparent, capped between <c>0</c> and <c>1</c>.
			</summary>
			<remarks>
				 At <c>0</c>, none of the reflection is shown, and at <c>1</c>, the fade gradient reaches the end of the view.
				 Defaults to <c>0.2</c>.
			</remarks>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsDecoratedShadowedView">
			<summary>
				The SEssentialsDecoratedShadowedView adds an inner shadow effect on either side of the wrapped view.
			</summary>
			<remarks>
				<img href="DecoratedShaded.png" />
				A shadowed view with default settings can be created, then further customized as;
				<code>SEssentialsDecoratedShadowedView shadowedView = new SEssentialsDecoratedShadowedView(view)
{
	ShadowAlpha = 0.9f,
	ShadowLength = 4.f
}</code>
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedShadowedView.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedShadowedView.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedShadowedView.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsDecoratedShadowedView.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedShadowedView.#ctor(MonoTouch.UIKit.UIView)">
			<summary>
				Constructs a new shadowed view around the given view.
			</summary>
			<remarks></remarks>
			<param name="view">
				The view to be wrapped in the shadowed view.
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsDecoratedShadowedView.ShadowLength">
			<summary>
				The length of the shadow, in points.
			</summary>
			<remarks>
				Defaults to <c>8</c> pts.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsDecoratedShadowedView.ShadowAlpha">
			<summary>
				The alpha value of the shadow at the edges of the view, between <c>0</c> and <c>1</c>.
			</summary>
			<remarks>
				Defaults to <c>0.5</c>.
			</remarks>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsDecoratedView">
			<summary>
				The SEssentialsDecoratedView allows decoration to be added to the wrapped UIView.
			</summary>
			<remarks>
				<para>
					This allows for ShinobiControls effects, such as reflection and shadows, to be applied to the
					<see cref="P:ShinobiEssentials.SEssentialsDecoratedView.View" />,
					which update as the wrapped <see cref="P:ShinobiEssentials.SEssentialsDecoratedView.View" /> is updated.
				</para>
				<para>
					For more information on the individual effects, see the relevant class;
					<list type="bullet">
						<item>
							<term>
								Shadows (<see cref="T:ShinobiEssentials.SEssentialsDecoratedShadowedView" />)
								<img href="DecoratedShadedThumb.png" />
							</term>
						</item>
						<item>
							<term>
								Fading (<see cref="T:ShinobiEssentials.SEssentialsDecoratedFadedView" />)
								<img href="DecoratedFadedThumb.png" />
							</term>
						</item>
						<item>
							<term>
								Reflection (<see cref="T:ShinobiEssentials.SEssentialsDecoratedReflectedView" />)
								<img href="DecoratedReflectiveThumb.png" />
							</term>
						</item>
						<item>
							<term>
								Double Sided (<see cref="T:ShinobiEssentials.SEssentialsDecoratedDoubleSidedView" />)
							</term>
						</item>
						<item>
							<term>
								Cached (<see cref="T:ShinobiEssentials.SEssentialsDecoratedCachedView" />)
							</term>
						</item>
					</list>
				</para>
				<para>
					Effects can be chained together to allow for multiple effects.
					For example, to add fading around the edges of a <c>view</c>, then reflect it;
					<code>SEssentialsDecoratedFadedView faded = new SEssentialsDecoratedFadedView(view);
SEssentialsDecoratedReflectedView reflected = new SEssentialsDecoratedReflectedView(faded);</code>
				</para>
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedView.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedView.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedView.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsDecoratedView.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsDecoratedView.View">
			<summary>
				The view which the SEssentialsDecoratedView was initialized with.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedView.#ctor(MonoTouch.UIKit.UIView)">
			<summary>
				Create an SEssentialsDecoratedView with a target view to apply effects to.
			</summary>
			<remarks>
				The SEssentialsDecoratedView resizes to fit the subview exactly.
			</remarks>
			<param name="view">
				The view to apply effects to.
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedView.ApplyDecoration">
			<summary>
				This forces the decorated view to update its contents.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsDecoratedView.Dispose(System.Boolean)">
			<summary>
				Releases unmanaged resources.
			</summary>
			<remarks></remarks>
			<param name="disposing">
				True if called by Dispose, false if called from a finalizer.
			</param>
		</member>


	    <member name="T:ShinobiEssentials.SEssentialsDiscreteIndicatorElement">
			<summary>A single visual element of a discrete progress indicator</summary>
			<remarks>
				<para>SEssentialsDiscreteIndicatorElement is a UIView subclass, a collection of which
 				can be arranged to form a ShinobiEssentials discrete progress or activity indicator.</para>
 				<para>An SEssentialsDiscreteIndicatorElement has 2 embedded UIViews - one for the 'on' state
				 and one for the 'off' state. The <c>onView</c> is overlaid on top of the <c>offView</c> and
				 has its transparency varied according to the current indicator state.</para>
			</remarks>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsDiscreteIndicatorElement.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsDiscreteIndicatorElement.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsDiscreteIndicatorElement.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsDiscreteIndicatorElement.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsDiscreteIndicatorElement.#ctor(System.Drawing.RectangleF,MonoTouch.UIKit.UIImage,MonoTouch.UIKit.UIImage)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="frame">The frame of the created element.</param>
			<param name="onImage">The UIImage associated with the fully-on state.</param>
			<param name="offImage">The UIImage associated with the fully-off state.</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsDiscreteIndicatorElement.#ctor(System.Drawing.RectangleF,MonoTouch.UIKit.UIView,MonoTouch.UIKit.UIView)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="frame">The frame of the created element.</param>
			<param name="onView">The UIView associated with the fully-on state.</param>
			<param name="offView">The UIView associated with the fully-off state</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsDiscreteIndicatorElement.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsDiscreteIndicatorElement.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsDiscreteIndicatorElement.ActiveProportion">
			<summary>Sets the alpha level of the on View.</summary>
	    </member>
			
			
	    <member name="T:ShinobiEssentials.SEssentialsDiscreteIndicatorElementFactory">
			<summary>Generates individual indicator elements</summary>
			<remarks>SEssentialsDiscreteIndicatorElementFactory defines a factory used by the discrete
 progress and activity indicators for generating the individual elements which make up the indicator.</remarks>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsDiscreteIndicatorElementFactory.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsDiscreteIndicatorElementFactory.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsDiscreteIndicatorElementFactory.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsDiscreteIndicatorElementFactory.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsDiscreteIndicatorElementFactory.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsDiscreteIndicatorElementFactory.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsDiscreteIndicatorElementFactory.ConformsToProtocol(System.IntPtr)">
	      <summary>Checks whether this object conforms to a protocol.
	      </summary>
		  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
		  <param name="protocol">The protocol</param>
		  <returns>True if the object conforms to the protocol</returns>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsDiscreteIndicatorElementFactory.ProgressIndicatorElement(System.Int32,ShinobiEssentials.SEssentialsProgressIndicator)">
			<summary>Releases unmanaged resources.</summary>
			<remarks>Should return an SEssentialsDiscreteIndicatorElement object which will become
 part of the specified SEssentialsProgressIndicator. This method will be called
 multiple times per indicator - once for each of the elements required.</remarks>
 			<param name="index">The index of the indicator element in the progress indicator</param>
			<param name="indicator">The SEssentialsProgressIndicator which has requested this indicator element</param>
	    </member>
			
			
		<member name="T:ShinobiEssentials.SEssentialsEdgeConstraints">
			<summary>Edge constraint options: None, Vertical, Horizontal</summary>
			<remarks>
				Used by <see cref="P:ShinobiEssentials.SEssentialsFlowLayout.EdgeConstraints" />.
			</remarks>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsEdgeConstraints.Horizontal">
			<summary>Subviews cannot move horizontally out of the view.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsEdgeConstraints.None">
			<summary>No constraints.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsEdgeConstraints.Vertical">
			<summary>Subviews cannot move vertically out of the view.</summary>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsEditButtonLocation">
			<summary>Edit button location options: Top right, Right, Bottom right, Bottom, BottomLeft, Left, TopLeft, Top</summary>
			<remarks>
				Used by <see cref="P:ShinobiEssentials.SEssentialsFlowLayout.EditButtonLocation" />
			</remarks>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsEditButtonLocation.Bottom">
			<summary>Bottom Center.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsEditButtonLocation.BottomLeft">
			<summary>Bottom Left.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsEditButtonLocation.BottomRight">
			<summary>Bottom Right.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsEditButtonLocation.Left">
			<summary>Center Left.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsEditButtonLocation.Right">
			<summary>Center Right.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsEditButtonLocation.Top">
			<summary>Top Center.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsEditButtonLocation.TopLeft">
			<summary>Top Left.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsEditButtonLocation.TopRight">
			<summary>Top Right.</summary>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsFlowDeleteIdiom">
			<summary>Flow layout deletion idiom options: TrashCan, Icon</summary>
			<remarks>Used by <see cref="P:ShinobiEssentials.SEssentialsFlowLayout.DeleteIdiom" /></remarks>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsFlowDeleteIdiom.Icon">
			<summary>A delete icon is added to each view.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsFlowDeleteIdiom.TrashCan">
			<summary>A single trash can is added to delete views.</summary>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsFlowLayout">
			<summary>A UIView that flows its subviews as text would be laid out on a page.</summary>
			<remarks>
				<para>
					The SEssentialsFlowLayout is a UIView that manages the layout of its subviews into rows
					attempting to flow the subviews as text would be laid out on a page. It supports an
					edit mode that allows users to long press a subview and then move/delete it.
				</para>
				<para>
					Once a flow layout has been created, subviews are added using the
					<see cref="M:ShinobiEssentials.SEssentialsFlowLayout.AddManagedSubview(MonoTouch.UIKit.UIView)" /> method.
					These subviews will be arranged in raster order within the containing flow layout view.
					The gaps between adjacent views within a row are determined with the 
					<see cref="P:ShinobiEssentials.SEssentialsFlowLayout.HorizontalSubviewSpacing" />
					property, whilst the spacing between rows is managed with the
					<see cref="P:ShinobiEssentials.SEssentialsFlowLayout.VerticalSubviewSpacing" /> property.
				</para>
				<para>
					The height of each row is determined by the subview within that row with the largest
					height. The vertical alignment of the subviews within a row is given by the 
					<see cref="P:ShinobiEssentials.SEssentialsFlowLayout.VerticalSubviewAlignment" />
					property and the horizontal alignment of each row within the flow layout by the
					<see cref="P:ShinobiEssentials.SEssentialsFlowLayout.HorizontalSubviewAlignment" /> property.
				</para>
				<para>
					Managed subviews can be removed or replaced using the 
					<see cref="M:ShinobiEssentials.SEssentialsFlowLayout.RemoveManagedSubview(MonoTouch.UIKit.UIView,System.Boolean)" /> and
					<see cref="M:ShinobiEssentials.SEssentialsFlowLayout.MoveManagedSubview(MonoTouch.UIKit.UIView,System.Int32)" />
					methods. An array of managed subviews in their current
					display order is provided by managedViews and passing an array of the current subviews
					to <see cref="M:ShinobiEssentials.SEssentialsFlowLayout.ReorderManagedSubviews(MonoTouch.UIKit.UIView[],System.Boolean)" />
					will change their ordering to that defined in the array.
				 </para>
				 <para>
					The flow layout has a style object, which is an instance of <see cref="T:ShinobiEssentials.SEssentialsFlowLayoutStyle" />.
					This manages the look and feel of the control by setting things like the tint color and
					background texture of the flow layout. The style object should always be used to update the
					look of the control, rather than accessing the flow layout and setting its properties directly.
				</para>
				<para>
					The style has precedence over any visual changes which are made to the flow layout directly.
					For example, if you were to set a property such as the background color on the flow layout directly,
					this change will be overridden the next time the style is updated. That is why it is important to
					use the style to manage the look and feel of the control.
				 </para>
	 		</remarks>
		</member>

	    <member name="M:ShinobiEssentials.SEssentialsFlowLayout.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsFlowLayout.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsFlowLayout.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsFlowLayout.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsFlowLayout.#ctor(System.Drawing.RectangleF)">
			<summary>Initialize view with the specified frame rectangle with default delete idiom.</summary>
			<param name="frame">Frame rectangle defining views extent</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsFlowLayout.#ctor(System.Drawing.RectangleF,ShinobiEssentials.SEssentialsFlowDeleteIdiom)">
			<summary>Initialize view with the specified frame rectangle and delete idiom.</summary>
			<param name="frame">Frame rectangle defining views extent</param>
			<param name="idiom">The delete idiom</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsFlowLayout.#ctor(System.Drawing.RectangleF,ShinobiEssentials.SEssentialsFlowDeleteIdiom,ShinobiEssentials.SEssentialsFlowLayoutStyle)">
			<summary>Initialize view with the specified frame rectangle, delete idiom and style.</summary>
			<param name="frame">Frame rectangle defining views extent</param>
			<param name="idiom">The delete idiom</param>
			<param name="style">The style</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsFlowLayout.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsFlowLayout.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.HorizontalSubviewAlignment">
			<summary>Horizontal alignment of subviews within each row</summary>
			<remarks>
				Defaults to <see cref="F:ShinobiEssentials.SEssentialsHorizontalAlignment.Top" />.
			</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.VerticalSubviewAlignment">
			<summary>Vertical alignment of subviews within each row.</summary>
			<remarks>
				Defaults to <see cref="F:ShinobiEssentials.SEssentialsVerticalAlignment.Top" />.
			</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.HorizontalSubviewSpacing">
			<summary>The horizontal minimum spacing between elements in points.</summary>
			<remarks>
				Defaults to <c>14</c>.
			</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.VerticalSubviewSpacing">
			<summary>The vertical minimum spacing between rows in points.</summary>
			<remarks>
				Defaults to <c>14</c>.
			</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.HorizontalSpacing">
			<summary>The horizontal minimum spacing between elements in points.</summary>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.VerticalSpacing">
		<summary>The vertical minimum spacing between rows points.</summary>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.HorizontalPadding">
			<summary>The horizontal padding at edges of parent in points.</summary>
			<remarks>
				Defaults to <c>8</c>.
			</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.VerticalPadding">
			<summary>The vertical padding at edges of parent in points.</summary>
			<remarks>
				Defaults to <c>8</c>.
			</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.AnimationType">
			<summary>Animation type when subviews are laid out.</summary>
			<remarks>Defaults to <see cref="F:ShinobiEssentials.SEssentialsAnimationType.Sweep" /></remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.EdgeConstraints">
			<summary>Controls how subviews are constrained at the edges</summary>
			<remarks>When moving a subview in edit mode this prevents the subview from positioning outside the bounds of the main view
 (defaults to SEssentialsEdgeConstraint.None)</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.MovementAnimationDuration">
			<summary>The duration of the animation when views animate to a new position, or when they grow as they are selected</summary>
			<remarks>This defaults to a quarter of a second.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.WobbleAnimationDuration">
			<summary>The duration of the wobble effect animation on views when they go into edit mode.</summary>
			<remarks>This defaults to a quarter of a second.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.InstantUpdate">
			<summary>Whether the layout updates on drag operations.</summary>
			<remarks>Updates the layout during drag operations if true, otherwise waits until drag has stopped moving. (Defaults to true)</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.ShowEditWobble">
			<summary>Enable / disable the wobble effect during edit mode. (Defaults to true).</summary>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.ShowDestinationMarker">
			<summary>Shows an indicator marking the target insertion point during edit. (Defaults to true)</summary>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.LongPressDuration">
		<summary>The minimum duration for pressing a subview before edit mode begins.</summary>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.Editable">
		<summary>Allows user to edit layout with long press. (Defaults to true).</summary>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.SnapToCenter">
			<summary>When moving a subview in edit mode this centers the subview on the touch point (defaults to false)</summary>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.HorizontalConstrainToEdge">
			<summary>When moving a subview in edit mode this prevents subviews from positioning outside the horizontal bounds of the main view (defaults to false)</summary>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.VerticalConstrainToEdge">
			<summary>When moving a subview in edit mode this prevents subviews from positioning outside the bounds of the main view (defaults to false).</summary>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.ShowDoneButton">
			<summary>Whether a Done button is provided.</summary>
			<remarks>When true a Done button is generated when edit mode begins (for SEssentialsFlowDeleteIdiom.Icon). When false the implementer must offer a means to end editing (e.g. a button or gesture) that calls 'endEditMode' to end editing (defaults to <c>true</c>)</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.Theme">
			<summary>The view's theme</summary>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.Style">
			<summary>Background, buttons and icons used in edit mode can be controlled through the style.</summary>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayout.ApplyTheme(ShinobiEssentials.SEssentialsTheme)">
			<summary>
				Applies the specified theme to the flow layout.
			</summary>
			<remarks></remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.DeleteIdiom">
			<summary>A read only property set at creation that determines the style of the edit mode.</summary>
			<remarks>
				<para>The Trashcan idiom requires users to drag unwanted subviews to a trashcan to remove them.
			The Icon idiom adds delete buttons to each subview like the Apple home screen (default).</para>
				<para>The SEssentialsFlowDeleteIdomIcon idiom causes the managed views in the flow layout control to wobble, just like in the Apple home screen.  By default, the edges of a view are not anti-aliased, so can appear jagged during this animation.  In order to enable anti-aliasing, you can set the UIViewEdgeAntialiasing flag in your app's info.plist.  Bear in mind that this will have an impact on performance, as it requires Core Animation to do extra work in order to calculate the blending.</para>
			</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.FlowDelegate">
			<summary>The delegate for the SEssentialsFlowLayout edit events.</summary>
			<remarks>Important. It is your responsibility to hold a reference to your delegate (if it is a separate object), to avoid it being garbage collected. 
			This property does not do this for you (unlike most properties in the API) to match the behavior of the native code.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.WeakFlowDelegate">
			<summary>A weakly typed delegate for the SEssentialsFlowLayout edit events.</summary>
			<remarks><see cref="P:ShinobiEssentials.SEssentialsFlowLayout.FlowDelegate"/></remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.ManagedViews">
			<summary>The UIViews which have been added to the Flow Layout.</summary>
			<remarks>This ordering changes when users rearranges elements on screen.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.EditButtonLocation">
		<summary>The location of the editing button in the flow layout.</summary>
		<remarks>This defaults to SEssentialsLocationTopRight.
 The editing button is the trash can for SEssentialsFlowDeleteIdiomTrashCan and the done button
 for SEssentialsFlowDeleteIdiomIcon.
 The value is ignored if an implementation of <c>EditButtonPositionInFlowLayout</c>
 is supplied in the delegate.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayout.DragsOutsideBounds">
		<summary>Option to allow a managed view to be dragged outside the flow layout area.</summary>
		<remarks>When true, the view will follow the gesture anywhere. When false, the view will stop at the edge of the flow, until the gesture returns inside the flow bounds.</remarks>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayout.AddManagedSubview(MonoTouch.UIKit.UIView)">
			<summary>Add a subview that has its position managed</summary>
			<param name="subview">The subview that is to be added</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayout.RemoveManagedSubview(MonoTouch.UIKit.UIView,System.Boolean)">
			<summary>Remove a subview</summary>
			<param name="subview">The subview to be removed</param>
			<param name="animated">When true a small fading animation occurs before removing the subview</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayout.MoveManagedSubview(MonoTouch.UIKit.UIView,System.Int32)">
			<summary>Move a subview</summary>
			<param name="subview">The subview that is to be moved</param>
			<param name="index">The target index for destination. The item is added before the target index shifting items following it down the list</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayout.ReorderManagedSubviews(MonoTouch.UIKit.UIView[],System.Boolean)">
			<summary>Reorder subviews</summary>
			<remarks>The array contents must match managedViews, otherwise an exception is thrown.</remarks>
			<param name="newOrdering">An array holding the subviews in the desired ordering.</param>
			<param name="animated">A boolean specifying whether the reordering should be animated or not.</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayout.EndEditMode">
			<summary>End the edit mode if it is in progress (i.e. removes delete icons, stops wobbling)</summary>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayout.ForceLayout">
			<summary>Causes items to be laid out.</summary>
			<remarks>This may be useful if a managed subview changes its size and the flow layout needs to respond to this.</remarks>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayout.ForceLayout(System.Drawing.PointF)">
			<summary>Force a layout with animation beginning at point.</summary>
			<param name="point">The point from which the layout will begin.</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayout.AddManagedSubview(MonoTouch.UIKit.UIView,System.Int32)">
			<summary>Add a subview that has its position managed, at the specified index</summary>
			<param name="subview">The subview to be added</param>
			<param name="index">The index to insert at</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayout.UnmanageSubview(MonoTouch.UIKit.UIView)">
			<summary>Stops managing a view, without destroying the view.</summary>
			<param name="subview">The subview to be unmanaged</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayout.BeginEditMode">
			<summary>Puts the layout into edit mode (i.e. delete icons and wobbling, if necessary)</summary>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsFlowLayoutDelegate">
			<summary>Delegate object for the FlowLayout</summary>
			<remarks>These callbacks allow for notification of events on the layout by the user and also allows for a confirmation that edit events like move and delete should proceed.</remarks>
		</member>

	    <member name="M:ShinobiEssentials.SEssentialsFlowLayoutDelegate.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsFlowLayoutDelegate.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsFlowLayoutDelegate.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsFlowLayoutDelegate.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsFlowLayoutDelegate.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsFlowLayoutDelegate.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>

	    <member name="M:ShinobiEssentials.SEssentialsFlowLayoutDelegate.ConformsToProtocol(System.IntPtr)">
	      <summary>Checks whether this object conforms to a protocol.
	      </summary>
		  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
		  <param name="protocol">The protocol</param>
		  <returns>True if the object conforms to the protocol</returns>
	    </member>
			
		<member name="M:ShinobiEssentials.SEssentialsFlowLayoutDelegate.ShouldRemoveView(ShinobiEssentials.SEssentialsFlowLayout,MonoTouch.UIKit.UIView)">
			<summary>Called to confirm if a users attempt to remove a subview should proceed.</summary>
			<param name="flow">The SEssentialFlowLayout</param>
			<param name="view">The subview that is requesting deletion</param>
			<returns>True indicates deletion should proceed</returns>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayoutDelegate.WillRemoveView(ShinobiEssentials.SEssentialsFlowLayout,MonoTouch.UIKit.UIView)">
			<summary>Indicates that a subview will be removed.</summary>
			<param name="flow">The SEssentialFlowLayout</param>
			<param name="view">The subview that will be removed</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayoutDelegate.DidRemoveView(ShinobiEssentials.SEssentialsFlowLayout,MonoTouch.UIKit.UIView)">
			<summary>Indicates that a subview has been removed.</summary>
			<param name="flow">The SEssentialFlowLayout</param>
			<param name="view">The subview that was removed</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayoutDelegate.ShouldMoveView(ShinobiEssentials.SEssentialsFlowLayout,MonoTouch.UIKit.UIView)">
			<summary>Called to confirm if a users attempt to directly move a subview should proceed.</summary>
			<param name="flow">The SEssentialFlowLayout</param>
			<param name="view">The subview that is about to be moved</param>
			<returns>True indicates move should proceed</returns>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayoutDelegate.WillMoveView(ShinobiEssentials.SEssentialsFlowLayout,MonoTouch.UIKit.UIView)">
			<summary>Indicates that a subview will be moved.</summary>
			<remarks>To find out the new index look up the subview in Flow.OrderedSubviews</remarks>
			<param name="flow">The SEssentialFlowLayout</param>
			<param name="view">The subview that will be moved</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayoutDelegate.DidMoveView(ShinobiEssentials.SEssentialsFlowLayout,MonoTouch.UIKit.UIView)">
			<summary>Indicates that a subview has been moved.</summary>
			<remarks>To find out the new index look up the subview in Flow.OrderedSubviews</remarks>
			<param name="flow">The SEssentialFlowLayout</param>
			<param name="view">The subview that was moved</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayoutDelegate.DidDragView(ShinobiEssentials.SEssentialsFlowLayout,MonoTouch.UIKit.UIView)">
			<summary>Indicates a subview is moving and makes repeated calls as the subview is dragged.</summary>
			<param name="flow">The SEssentialFlowLayout</param>
			<param name="view">The subview that was moved</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayoutDelegate.DidSelectView(ShinobiEssentials.SEssentialsFlowLayout,MonoTouch.UIKit.UIView)">
			<summary>Indicates that a subview has been selected.</summary>
			<param name="flow">The SEssentialFlowLayout</param>
			<param name="view">The subview that was selected</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayoutDelegate.DidNotMoveView(ShinobiEssentials.SEssentialsFlowLayout,MonoTouch.UIKit.UIView)">
			<summary>Indicates that a subview has not been moved after it was dragged.</summary>
			<remarks>To find out the new index look up the subview in Flow.OrderedSubviews</remarks>
			<param name="flow">The SEssentialFlowLayout</param>
			<param name="view">The subview that was not moved</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayoutDelegate.GetDeleteIconPosition(ShinobiEssentials.SEssentialsFlowLayout,MonoTouch.UIKit.UIView)">
			<summary>If implemented allows position other than default top left for 'delete' icon on each item during edit mode.</summary>
			<param name="flow">The SEssentialFlowLayout</param>
			<param name="view">The view whose delete icon is being queried</param>
			<returns>The position relative to the view origin for the delete icon</returns>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayoutDelegate.GetEditButtonPosition(ShinobiEssentials.SEssentialsFlowLayout)">
			<summary>If implemented allows position other than that supplied by EditButtonLocation for the editing button in the flow layou</summary>
			<param name="flow">The SEssentialFlowLayout</param>
			<returns>The position relative to the flow origin for the done button</returns>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayoutDelegate.GetTrashCanPosition(ShinobiEssentials.SEssentialsFlowLayout)">
			<summary>If implemented allows position other than default top right for 'trashcan' during edit mode of SEssentialsFlowDeleteIdiom.TrashCan</summary>
			<param name="flow">The SEssentialFlowLayout</param>
			<returns>The position relative to the flow origin for the done button</returns>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayoutDelegate.GetDragPointForTouch(ShinobiEssentials.SEssentialsFlowLayout,System.Drawing.PointF,MonoTouch.UIKit.UIView)">
			<summary>If implemented provides the offset in the subview that will be positioned under the drag point during editing.</summary>
			<param name="flow">The SEssentialFlowLayout</param>
			<param name="point">The initial touch point offset</param>
			<param name="view">The subview that was moved</param>
			<returns>The position relative to the view center that will move under the drag point</returns>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayoutDelegate.GetImageForDestinationMoving(ShinobiEssentials.SEssentialsFlowLayout,MonoTouch.UIKit.UIView)">
			<summary>If implemented allows the destination marker image to be provided.</summary>
			<param name="flow">The SEssentialFlowLayout</param>
			<param name="view">the subview that is moving</param>
			<returns>The image that will be drawn at the the insertion point while editing</returns>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayoutDelegate.AnimateViewToTarget(ShinobiEssentials.SEssentialsFlowLayout,MonoTouch.UIKit.UIView,System.Drawing.PointF)">
			<summary>When implemented must animate the view to the target position.</summary>
			<remarks>This is called when the animationType is set to SEssentialsAnimationUser</remarks>
			<param name="flow">The SEssentialFlowLayout</param>
			<param name="view">The subview that is moving</param>
			<param name="target">The intended center destination at the end of the animation</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayoutDelegate.WillBeginEdit(ShinobiEssentials.SEssentialsFlowLayout)">
			<summary>Indicates layout will be put into edit mode</summary>
			<param name="flow">The SEssentialFlowLayout</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayoutDelegate.DidBeginEdit(ShinobiEssentials.SEssentialsFlowLayout)">
			<summary>Indicates layout is now in edit mode</summary>
			<param name="flow">The SEssentialFlowLayout</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayoutDelegate.WillEndEdit(ShinobiEssentials.SEssentialsFlowLayout)">
			<summary>Indicates layout will finish editing</summary>
			<param name="flow">The SEssentialFlowLayout</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayoutDelegate.DidEndEdit(ShinobiEssentials.SEssentialsFlowLayout)">
			<summary>Indicates layout has finished editing</summary>
			<param name="flow">The SEssentialFlowLayout</param>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsFlowLayoutImagesWrapper">
			<summary>
				A collection of images, used for creating an <c>SEssentialsFlowLayoutStyle</c>.
			</summary>
			<remarks>
				Any values set to null will use the default images instead.
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsFlowLayoutImagesWrapper.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsFlowLayoutImagesWrapper.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsFlowLayoutImagesWrapper.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsFlowLayoutImagesWrapper.#ctor">
			<summary>Default constructor.</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsFlowLayoutImagesWrapper.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsFlowLayoutImagesWrapper.Dispose(System.Boolean)"> 			<summary>Releases unmanaged resources.</summary> 			<param name="disposing">True if called by Dispose, false if called from a finalizer</param> 		</member> 
		<member name="P:ShinobiEssentials.SEssentialsFlowLayoutImagesWrapper.TrashcanImage">
			<summary>
				This is the image which appears for flow elements to be dragged to for deletion when the
				<c>SEssentialsFlowLayout</c> is set to use the <c>SEssentialsFlowDeleteIdiom.TrashCan</c>
				delete idiom.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsFlowLayoutImagesWrapper.TrashcanMask">
			<summary>
				This is mask defines where the trashcan will be colored with <c>TrashcanTintColor</c>.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsFlowLayoutImagesWrapper.DoneButtonImage">
			<summary>
				This is the image which appears to exit edit mode on a <c>SEssentialsFlowLayout</c> when
				the <c>SEssentialsFlowDeleteIdiom.Icon</c> delete idiom is used.
			</summary>
			<remarks>
				This is the image for the default state.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsFlowLayoutImagesWrapper.DoneButtonPressedImage">
			<summary>
				This is the image which appears to exit edit mode on a <c>SEssentialsFlowLayout</c> when
				the <c>SEssentialsFlowDeleteIdiom.Icon</c> delete idiom is used.
			</summary>
			<remarks>
				This is the image for the pressed state.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsFlowLayoutImagesWrapper.DeleteImage">
			<summary>
				This is the image which appears on the corner of individual flow elements during edit mode when
				the <c>SEssentialsFlowLayout</c> is using <c>SEssentialsFlowDeleteIdiom.Icon</c> delete idiom.
			</summary>
			<remarks>
				This is the image for the default button state.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsFlowLayoutImagesWrapper.DeletePressedImage">
			<summary>
				This is the image which appears on the corner of individual flow elements during edit mode when
				the <c>SEssentialsFlowLayout</c> is using <c>SEssentialsFlowDeleteIdiom.Icon</c> delete idiom.
			</summary>
			<remarks>
				This is the image for the pressed button state.
			</remarks>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsFlowLayoutStyle">
			<summary>The SEssentialsFlowLayoutStyle defines the look and feel for an instance of the SEssentialsFlowLayout class.</summary>
			<remarks>
				<para>
					If you wish to configure how your flow layout looks, you should modify the properties on this class.
				</para><para>
					<c>SEssentialsFlowLayoutStyle</c> derives from <c>SEssentialsStyle</c>, and so it is initialized from a
					<c>SEssentialsTheme</c> object. The theme provides the default settings for the style.
				</para><para>
					The following default settings are taken from the theme:
					<list type="bullet">
						<item>
							<term>
								The <c>PrimaryTintColor</c> on the theme is used for the background color of the flow layout
								(<c>MainViewTintColor</c>).
							</term>
						</item>
						<item>
							<term>
								The <c>PrimaryTexture</c> on the theme is used for the background texture of the flow layout
								(<c>MainViewTexture</c>).
							</term>
						</item>
					</list>
				</para>
			</remarks>
		</member>
		
	    <member name="M:ShinobiEssentials.SEssentialsFlowLayoutStyle.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsFlowLayoutStyle.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsFlowLayoutStyle.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsFlowLayoutStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsFlowLayoutStyle.#ctor(ShinobiEssentials.SEssentialsTheme,MonoTouch.UIKit.UIImage,MonoTouch.UIKit.UIImage,MonoTouch.UIKit.UIImage,MonoTouch.UIKit.UIImage,MonoTouch.UIKit.UIImage,MonoTouch.UIKit.UIImage)">
			<summary>
				DEPRECATED in ShinobiEssentials v2.1, use
				<see cref="C:ShinobiEssentials.SEssentialsFlowLayoutStyle(ShinobiEssentials.SEssentialsTheme,ShinobiEssentials.SEssentialsFlowLayoutImagesWrapper)" />
				instead.
			</summary>
			<remarks></remarks>
			<param name="theme"></param>
			<param name="trashcanImage"></param>
			<param name="trashcanMask"></param>
			<param name="doneButtonImage"></param>
			<param name="doneButtonPressedImage"></param>
			<param name="deleteImage"></param>
			<param name="deletePressedImage"></param>
	    </member>
		
		<member name="M:ShinobiEssentials.SEssentialsFlowLayoutStyle.#ctor(ShinobiEssentials.SEssentialsTheme,ShinobiEssentials.SEssentialsFlowLayoutImagesWrapper)">
			<summary>
				Initializes the style object with a set of custom icons for the flow layout.
			</summary>
			<remarks>
				<para>
					See <see cref="T:ShinobiEssentials.SEssentialsFlowLayoutImagesWrapper" /> for more details.
				</para>
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsFlowLayoutStyle.#ctor(ShinobiEssentials.SEssentialsTheme)">
		  <summary>Instantiates the style with the specified theme.</summary>
		  <param name="theme">The theme</param>
		</member>
			
	    <member name="P:ShinobiEssentials.SEssentialsFlowLayoutStyle.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsFlowLayoutStyle.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
		<member name="P:ShinobiEssentials.SEssentialsFlowLayoutStyle.TrashcanImage">
			<summary>The trash can image</summary>
			<remarks>
				<para>This is the image which appears for flow elements to be dragged to for deletion
				 when the SEssentialsFlowLayout is set to use the SEssentialsFlowDeleteIdiom.TrashCan
				 delete idiom.</para>
				<para>Has a default image provided by the ShinobiEssentials framework. To override,
				 use the custom constructor above.</para>		
			</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayoutStyle.TrashcanMask">
			<summary>The trash can mask image</summary>
			<remarks>
				<para>This mask defines where the trashcan will be colored with trashcanTintColor.</para>
				<para>Has a default image provided by the ShinobiEssentials framework. To override,
 use the custom constructor above.</para>		
			</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayoutStyle.DoneButtonImage">
			<summary>The done button image</summary>
			<remarks>
				<para> This is the image which appears to exit edit mode on a SEssentialsFlowLayout when
				 the `SEssentialsFlowDeleteIdiomIcon` delete idiom is used. This is the image for
				 the default state.</para>
				<para> Has a default image provided by the ShinobiEssentials framework. To override,
				 subclass SEssentialsFlowLayoutStyle.</para>
			</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayoutStyle.DoneButtonPressedImage">
			<summary>The done button pressed image</summary>
			<remarks>
				<para> This is the image which appears to exit edit mode on a SEssentialsFlowLayout when
				 the `SEssentialsFlowDeleteIdiomIcon` delete idiom is used. This is the image for
				 the pressed state.</para>
				<para> Has a default image provided by the ShinobiEssentials framework. To override,
				 subclass SEssentialsFlowLayoutStyle.</para>
			</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayoutStyle.DeleteImage">
			<summary>The delete image</summary>
			<remarks>
				<para> This is the image which appears on the corner of individual flow elements during
				 edit mode when the SEssentialsFlowLayout is using `SEssentialsFlowDeleteIdiomIcon`
				 delete idiom. This is the image for the default button state.</para>
				<para> Has a default image provided by the ShinobiEssentials framework. To override,
				 subclass SEssentialsFlowLayoutStyle.</para>
			</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayoutStyle.DeletePressedImage">
			<summary>The delete pressed image</summary>
			<remarks>
				<para> This is the image which appears on the corner of individual flow elements during
				 edit mode when the SEssentialsFlowLayout is using `SEssentialsFlowDeleteIdiomIcon`
				 delete idiom. This is the image for the pressed button state.</para>
				<para> Has a default image provided by the ShinobiEssentials framework. To override,
				 subclass SEssentialsFlowLayoutStyle.</para>
			</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayoutStyle.MainViewTexture">
			<summary>The texture of the view background.</summary>
			<remarks>This defaults to the <c>PrimaryTexture</c> on the theme.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayoutStyle.MainViewTintColor">
			<summary>The tint color of the view background.</summary>
			<remarks>This defaults to the <c>PrimaryTintColor</c> on the theme.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayoutStyle.TrashCanTintColor">
			<summary>The tint color of the FlowLayout trashcan icon.</summary>
			<remarks>This defaults to the <c>TertiaryTintColor</c> on the theme.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsFlowLayoutStyle.SelectedScaleFactor">
			<summary>The amount to scale a view by when it is selected.</summary>
			<remarks>A value of 1.0F will not scale the subview. The default value for this property is 1.1F.</remarks>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsHorizontalAlignment">
			<summary>Horizontal alignment options: Left, Center, Right</summary>
			<remarks>Used by <see cref="P:ShinobiEssentials.SEssentialsFlowLayout.HorizontalSubviewAlignment" /></remarks>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsHorizontalAlignment.Center">
			<summary>Aligned to center.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsHorizontalAlignment.Left">
			<summary>Aligned left.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsHorizontalAlignment.Right">
			<summary>Aligned right.</summary>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsIndicatorType">
			<summary>Indicator type options: LinearContinuous, LinearDiscrete, RadialContinuous, RadialComplete</summary>
			<remarks>
				Used by <see cref="T:ShinobiEssentials.SEssentialsProgressIndicator" /> and <see cref="T:ShinobiEssentials.SEssentialsActivityIndicator" />.
			</remarks>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsIndicatorType.LinearContinuous">
			<summary>A continuous linear indicator.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsIndicatorType.LinearDiscrete">
			<summary>A linear indicator made of discrete elements.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsIndicatorType.RadialContinuous">
			<summary>A continuous radial indicator.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsIndicatorType.RadialDiscrete">
			<summary>A radial indicator made of discete elements.</summary>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsIOS7Theme">
			<summary>
				A concrete implementation of <c>SEssentialsTheme</c> which follows the Apple guidelines for styling
				controls in iOS7.
			</summary>
			<remarks>
				This is set as the default global theme when your app is running in iOS7. To explicitly set it as the
				default global theme in other versions of iOS, you can do the following:
				<code>SEssentials.Theme =new SEssentialsIOS7Theme();</code>
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsIOS7Theme.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsIOS7Theme.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsIOS7Theme.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsIOS7Theme.#ctor">
			<summary>Default constructor.</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsIOS7Theme.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsLicenseVerifier">
		<summary>Utility class for trial license management</summary>
		</member>

	    <member name="M:ShinobiEssentials.SEssentialsLicenseVerifier.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsLicenseVerifier.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsLicenseVerifier.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsLicenseVerifier.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsLicenseVerifier.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsLicenseVerifier.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsLicenseVerifier.SetLicenseKey(System.String)">
			<summary>Set a licence key for all ShinobiEssentials controls.</summary>
			<param name="licenseKey">The license key</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsLicenseVerifier.VerifyLicenseKey">
			<summary>Verify the previously set licence key.</summary>
	    </member>
			

		<member name="T:ShinobiEssentials.SEssentialsLightTheme">
			<summary>A concrete implementation of an SEssentialsTheme with light tones as defaults.</summary>
			<remarks>
				To use <c>SEssentialsLightTheme</c> as the default global theme:
				<code>SEssentials.Theme = new SEssentialsLightTheme();</code>
			</remarks>
		</member>
		
	    <member name="M:ShinobiEssentials.SEssentialsLightTheme.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsLightTheme.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsLightTheme.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsLightTheme.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsLightTheme.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsLightTheme.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			

		<member name="T:ShinobiEssentials.SEssentialsDarkTheme">
			<summary>
				A concrete implementation of an SEssentialsTheme with dark tones as defaults.
			</summary>
			<remarks>
				This is the default global theme used in an app which is running in versions of iOS earlier than 7.0.
			</remarks>
		</member>
		
	    <member name="M:ShinobiEssentials.SEssentialsDarkTheme.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsDarkTheme.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsDarkTheme.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsDarkTheme.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsDarkTheme.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsDarkTheme.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			

		<member name="T:ShinobiEssentials.SEssentialsTransparentTheme">
		<summary>A concrete implementation of an SEssentialsTheme with transparent tones as default.</summary>
			<remarks>
				<para>
					To use <c>SEssentialsTransparentTheme</c> as the default global theme:
					<code>SEssentials.Theme = new SEssentialsTransparentTheme();</code>
				</para>
	    	</remarks>
		</member>
		
	    <member name="M:ShinobiEssentials.SEssentialsTransparentTheme.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsTransparentTheme.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTransparentTheme.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTransparentTheme.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTransparentTheme.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTransparentTheme.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			

		<member name="T:ShinobiEssentials.SEssentialsProgressIndicator">
			<summary>A SEssentialsProgressIndicator displays the progress of a long running task.</summary>
			<remarks>
				<para> SEssentialsProgressIndicator is used to display the progress of a long running task.</para>
				<para> The SEssentialsProgressIndicator holds the current progress of the indicator.  Progress can range between 0, indicating no progress, and 1, indicating that a task is complete.</para>
				<para>
					To create a progress indicator, you use one of the factory methods provided.
					For example:
					<code>SEssentialsProgressIndicator progressIndicator = SEssentialsProgressIndicator.Create(SEssentialsIndicatorType.LinearContinuous, new RectangleF(0, 0, 200, 200));</code>
				</para>
				<para>
					This returns a progress indicator which you can use in your code.
					When creating an indicator, you specify the type of indicator you would like.
					The following types are available:
					<list type="bullet">
						<item>
							<term>
								<see cref="F:ShinobiEssentials.SEssentialsIndicatorType.LinearContinuous" />: A continuous horizontal progress bar.
							</term>
						</item>
						<item>
							<term>
								<see cref="F:ShinobiEssentials.SEssentialsIndicatorType.LinearDiscrete" />: A horizontal progress bar, made up of a set of discrete elements.
							</term>
						</item>
						<item>
							<term>
								<see cref="F:ShinobiEssentials.SEssentialsIndicatorType.RadialContinuous" />: A continuous radial progress bar.
							</term>
						</item>
						<item>
							<term>
								<see cref="F:ShinobiEssentials.SEssentialsIndicatorType.RadialDiscrete" />: A radial progress bar, made up of a set of discrete elements.
							</term>
						</item>
					</list>
				</para>
				<para> When you set the progress of a progress indicator, it will redraw to show the new status.</para>
				<para> For discrete progress indicators, you can set the number of elements in the indicator using the numberOfElements property.  If you wish to use a custom factory to provide the progress indicator with elements, you can override the default by setting the elementFactory property.</para>
				<para>The SEssentialsProgressIndicator has a style object, which is an instance of SEssentialsProgressIndicator Style.
 This manages the look and feel of the control by setting things like the color of the progress indicator.
 The style object should always be used to update the look and feel of the control, rather than
 accessing the progress indicator and setting its properties directly.</para>
				<para>The style has precedence over any visual changes which are made to the progress indicator directly. For example,
 if you were to set a property such as the tint color on the progress indicator itself this change would be
 overridden the next time the style is updated. That is why it is important to use the style to manage the look
 and feel of the control.</para>
			</remarks>
		</member>
		
	    <member name="M:ShinobiEssentials.SEssentialsProgressIndicator.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsProgressIndicator.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsProgressIndicator.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsProgressIndicator.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsProgressIndicator.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsProgressIndicator.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsProgressIndicator.ElementFactory">
			<summary>A factory which provides individual elements to be drawn in the discrete progress indicator.</summary>
			<remarks>
				<para>If you wish to customize the elements used by the progress indicator you need to implement a subclass of SEssentialsDiscreteIndicatorElementFactory and set this property. This is only relevant to discrete progress bars.</para>
				<para>Important. It is your responsibility to hold a reference to your element factory (if it is a separate object), to avoid it being garbage collected. 
			This property does not do this for you (unlike most properties in the API) to match the behavior of the native code.</para>
			</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsProgressIndicator.NumberOfElements">
			<summary>The number of discrete elements in the progress bar.</summary>
			<remarks>This is only relevant to discrete progress bars.  This property defaults to a value of 12 elements.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsProgressIndicator.Progress">
			<summary>The current progress of the indicator.</summary>
			<remarks>Progress can range between 0 and 1. Because this updates the UI it should always be set on the main thread.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsProgressIndicator.Style">
			<summary>The styling which will be applied to the progress bar.</summary>
	    </member>

		<member name="M:ShinobiEssentials.SEssentialsProgressIndicator.ApplyTheme(ShinobiEssentials.SEssentialsTheme)">
			<summary>
				Applies the specified theme to the progress indicator.
			</summary>
			<remarks></remarks>
		</member>

	    <member name="M:ShinobiEssentials.SEssentialsProgressIndicator.Create(ShinobiEssentials.SEssentialsIndicatorType,System.Drawing.RectangleF)">
			<summary>Creates a progress indicator</summary>
			<remarks>Use this instead of a constructor</remarks>
			<param name="indicatorType">The type of indicator to create</param>
			<param name="frame">The position and size of the indicator</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsProgressIndicator.Create(ShinobiEssentials.SEssentialsIndicatorType,System.Drawing.RectangleF,ShinobiEssentials.SEssentialsProgressIndicatorStyle)">
			<summary>Creates a progess indicator</summary>
			<remarks>Use this instead of a constructor</remarks>
			<param name="indicatorType">The type of indicator to create</param>
			<param name="frame">The position and size of the indicator</param>
			<param name="style">The indicator's visual style</param>
	    </member>
			

		<member name="T:ShinobiEssentials.SEssentialsProgressIndicatorStyle">
			<summary>Defines the look and feel for an instance of the SEssentialsProgressIndicator class.</summary>
			<remarks>
				<para>
					If you wish to update how a progress or activity indicator looks, you should modify the properties
					of its style object.
				</para><para>
					<c>SEssentialsProgressIndicatorStyle</c> derives from <c>SEssentialsStyle</c>, and so it is created
					from a <c>SEssentialsTheme</c> object.
					The theme with which it is created provides the default settings of the style.
				</para><para>
 					The default settings of the following properties on the control are set from the theme:
 					<list type="bullet">
 						<item>
 							<term>
 								The <c>TertiaryTintColor</c> on the theme is used for the color of the completed portion
 								of the indicator (<c>TintColor</c>).
 							</term>
 						</item>
 						<item>
 							<term>
 								The <c>InactiveTintColor</c> on the theme is used for the color of the incomplete portion
 								of the indicator (<c>TrackColor</c>).
 							</term>
 						</item>
 						<item>
 							<term>
 								The <c>PrimaryFont</c> on the theme defines the font of the progress label
 								(<c>ProgressLabelFont</c>).
 							</term>
 						</item>
 						<item>
 							<term>
 								The <c>ElementStyle</c> on the theme defines whether shading is applied to the completed
 								portion of the indicator (<c>ShadingEffect</c>), and whether a border is drawn around it
 								(<c>TrackBorderWidth</c>).
 							</term>
 						</item>
 					</list>
 				</para>
			</remarks>
		</member>
		
	    <member name="M:ShinobiEssentials.SEssentialsProgressIndicatorStyle.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsProgressIndicatorStyle.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsProgressIndicatorStyle.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsProgressIndicatorStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsProgressIndicatorStyle.#ctor(ShinobiEssentials.SEssentialsTheme)">
			<summary>Initialize the style with a particular theme.</summary>
			<param name="theme">The theme</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsProgressIndicatorStyle.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsProgressIndicatorStyle.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsProgressIndicatorStyle.IndicatorBackgroundColor">
			<summary>The color of the progress indicator's background.</summary>
			<remarks></remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsProgressIndicatorStyle.TrackColor">
			<summary>The color of the incomplete portion of the indicator.</summary>
			<remarks>This defaults to the <c>InactiveTintColor</c> provided by the theme.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsProgressIndicatorStyle.TintColor">
			<summary>The color of the completed portion of the indicator.</summary>
			<remarks>This defaults to the <c>TertiaryTintColor</c> provided by the theme.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsProgressIndicatorStyle.TrackBorderWidth">
			<summary>Represents the width of the border around the foreground element in the continuous indicators.</summary>
			<remarks>
				If <c>ElementStyle</c> on the theme is set to <c>Decorated</c>, this defaults to <c>2.0</c>.
				Otherwise, this defaults to <c>0.0</c>.
			</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsProgressIndicatorStyle.ElementSize">
			<summary>The visual size of the indicator elements</summary>
			<remarks>In discrete indicators, this represents the diameter of default circle elements.  Note: this has no effect with user-defined elements.
 In continuous indicators, this represents the width of the main indicator element.  Defaults to 10.0F.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsProgressIndicatorStyle.FadeTail">
			<summary>Determines whether the tail of a discrete activity indicator should fade or not.</summary>
			<remarks>If false, all the elements will either be in an `on` state, or an `off` state. Defaults to true.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsProgressIndicatorStyle.ForegroundLineWidth">
			<summary>An encapsulated float which represents the width of the main indicator element in the continuous indicators.</summary>
			<remarks>Defaults to 10</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsProgressIndicatorStyle.NumberOfElements">
			<summary>The number of elements present in a discrete indicator.</summary>
			<remarks>Defaults to 16</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsProgressIndicatorStyle.ShadingEffect">
			<summary>Whether or not the indicator should render shading effects.</summary>
			<remarks>This defaults to the <c>ElementStyle</c> property provided by the theme.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsProgressIndicatorStyle.ShowProgressLabel">
			<summary>Determines whether the progress label will be shown or not.</summary>
			<remarks>The label is only displayed for radial indicators, and is displayed in the center of the indicator.  Defaults to false.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsProgressIndicatorStyle.ProgressLabelColor">
			<summary>The color of the progress label.</summary>
			<remarks>Defaults to the <c>PrimaryTextColor</c> on the theme.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsProgressIndicatorStyle.ProgressLabelFont">
			<summary>The font used for the progress label.</summary>
			<remarks>Defaults to the <c>PrimaryFont</c> on the theme.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsProgressIndicatorStyle.ShowBackground">
			<summary>Determines whether the progress indicator has a background</summary>
			<remarks>Defaults to false.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsProgressIndicatorStyle.BackgroundPadding">
			<summary>The padding in pixels around the indicator for the background.</summary>
			<remarks>Defaults to 5 pixels</remarks>
	    </member>
			

		<member name="T:ShinobiEssentials.SEssentialsScrollableTabBar">
			<summary>An implementation of SEssentialsTabBarProtocol that scrolls left and right to hold more tabs that can fit on screen at once.</summary>
		</member>
		
	    <member name="M:ShinobiEssentials.SEssentialsScrollableTabBar.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsScrollableTabBar.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsScrollableTabBar.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsScrollableTabBar.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsScrollableTabBar.#ctor(System.Drawing.RectangleF)">
			<summary>Initialize view with the specified frame rectangle.</summary>
			<param name="frame">Frame rectangle defining views extent</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsScrollableTabBar.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsScrollableTabBar.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsScrollableTabBar.ConformsToProtocol(System.IntPtr)">
	      <summary>Checks whether this object conforms to a protocol.
	      </summary>
		  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
		  <param name="protocol">The protocol</param>
		  <returns>True if the object conforms to the protocol</returns>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsScrollableTabBar.DestinationOffset">
			<summary></summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsScrollableTabBar.ParentTabbedView">
			<summary>The containing SEssentialsTabbedView</summary>
			<remarks>This is set automatically when the SEssentialsScrollableTabBar is added to the SEssentialsTabbedView, which will probably have been added to a parent view with AddSubview. 
			If you set it explicitly it is your responsibility to hold a reference to the TabbedView (AddSubview will have done this for you), to avoid it being garbage collected. 
			This property does not itself do this for you (unlike most properties in the API) to match the behavior of the native code.
			</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsScrollableTabBar.TabLayout">
			<summary>A flow layout control used for tab rendering</summary>
			<remarks>This implementation of SEssentialsTabBarProtocol uses the flow layout control to render the tabs and manage the positioning of them.
The layout control is embedded in a scroll view to allow it to pan through the tabs and the ordering and reordering of the tabs is managed by the flow control.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsScrollableTabBar.Timer">
			<summary>An internal timer</summary>
			<remarks>This implementation embeds a flow control within a scroll view and the timer is used to keep the scrollview aligned when the flow control is edited.</remarks>
	    </member>
			

		<member name="T:ShinobiEssentials.SEssentialsSlidingOverlay">
			<summary>The SEssentialsSlidingOverlay class represents two UIViews, one of which slides over the other, to reveal it.</summary>
			<remarks>
				<para>This saves screen real-estate by hiding
				content behind the main view and animating it in when required.</para>
				<para>
					The <see cref="P:ShinobiEssentials.SEssentialsSlidingOverlay.Underlay" /> may be exposed from left, right, top or bottom of the
					main content view, which will feel like it is sliding (not shrinking) to expose the
					<see cref="P:ShinobiEssentials.SEssentialsSlidingOverlay.Underlay" />.
					The <see cref="P:ShinobiEssentials.SEssentialsSlidingOverlay.Underlay" /> is the full height (left or right side) or full width
					(top or bottom) and its other dimension is a variable percentage of the <see cref="P:ShinobiEssentials.SEssentialsSlidingOverlay.Overlay" />.
				</para>
 				<para>The sliding overlay has a style object, which is an instance of SEssentialsSlidingOverlayStyle.  This manages the look and feel of the control by setting things like the tint color and background texture of the underlay and the overlay.  The style object should always be used to update the look of the control, rather than accessing the underlay or overlay and setting their properties directly.</para>
 				<para>The style has precedence over any visual changes which are made to the sliding overlay directly.  For example, if you were to set a property such as the tintColor on the underlay directly, this change will be overridden next time the style is updated.  That is why it is important to use the style to manage the look and feel of the control.</para>
			</remarks>
		</member>

	    <member name="M:ShinobiEssentials.SEssentialsSlidingOverlay.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsSlidingOverlay.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsSlidingOverlay.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsSlidingOverlay.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
		<member name="M:ShinobiEssentials.SEssentialsSlidingOverlay.#ctor(System.Drawing.RectangleF)">
			<summary>Initialize the overlay with a frame. Toolbar is on by default.</summary>
			<param name="frame">The frame rectangle</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsSlidingOverlay.#ctor(System.Drawing.RectangleF,System.Boolean)">
			<summary>Initialize the overlay with a frame and specify whether a toolbar should be displayed</summary>
			<param name="frame">The frame rectangle</param>
			<param name="showToolbar">Whether a toolbar should be displayed</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsSlidingOverlay.#ctor(System.Drawing.RectangleF,System.Boolean,ShinobiEssentials.SEssentialsSlidingOverlayStyle)">
			<summary>Initialize the overlay with a frame and specify whether a toolbar should be displayed and supply a style</summary>
			<param name="frame">The frame rectangle</param>
			<param name="showToolbar">Whether a toolbar should be displayed</param>
			<param name="style">The style</param>
		</member>

	    <member name="P:ShinobiEssentials.SEssentialsSlidingOverlay.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsSlidingOverlay.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlay.AnimationCurve">
			<summary>The animation's curve, see UIViewAnimationCurve. This animation curve defines the way the subview slides in and out of view.</summary>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlay.AnimationDuration">
			<summary>The duration, in seconds, over which the animation should take place</summary>
			<remarks>
				Defaults to <c>0.25</c>.
			</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlay.Delegate">
			<summary>The delegate for the SEssentialsSlidingOverlay</summary>
			<remarks>Important. It is your responsibility to hold a reference to your delegate (if it is a separate object), to avoid it being garbage collected. 
			This property does not do this for you (unlike most properties in the API) to match the behavior of the native code.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlay.WeakDelegate">
			<summary>A weakly typed delegate for the SEssentialsSlidingOverlay</summary>
			<remarks><see cref="P:ShinobiEssentials.SEssentialsSlidingOverlay.Delegate"/></remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlay.GestureAreaRatio">
			<summary>A value describing the area where the user can perform a gesture to reveal the subview.</summary>
			<remarks>This is a fraction between <c>0.0</c> and <c>1.0</c>. This represents a fraction of the control's width or height (Defaults to 0.5)</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlay.GestureRecognizer">
			<summary>A gesture recognizer.</summary>
			<remarks>Using this the gesture recognizer can be disabled or changed completely. This is a swipe gesture by default and,
	 unless overridden, the swipe direction is updated to keep in sync with the underlay location</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlay.Overlay">
			<summary>The Overlay, which slides over to reveal the <see cref="P:ShinobiEssentials.SEssentialsSlidingOverlay.Underlay" />
			- add subviews to this as necessary</summary>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlay.Style">
			<summary>The style object used to style the overlay and underlay.</summary>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsSlidingOverlay.ApplyTheme(ShinobiEssentials.SEssentialsTheme)">
			<summary>
				Applies the specified theme to the sliding overlay.
			</summary>
			<remarks></remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlay.Toolbar">
			<summary>Toolbar property - using this the toolbar can be changed or removed</summary>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlay.Underlay">
			<summary>The hidden view, which the <see cref="P:ShinobiEssentials.SEssentialsSlidingOverlay.Overlay" /> slides over to reveal
			- add subviews to this as necessary</summary>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlay.UnderlayLocation">
			<summary>The location of the <see cref="P:ShinobiEssentials.SEssentialsSlidingOverlay.Underlay" />
			- the <see cref="P:ShinobiEssentials.SEssentialsSlidingOverlay.Overlay" /> slides out to reveal the
			<see cref="P:ShinobiEssentials.SEssentialsSlidingOverlay.Underlay" /> anchored in this direction.</summary>
			<remarks>
				Setting this property will result in the change being animated. Use
				<see cref="M:ShinobiEssentials.SEssentialsSlidingOverlay.SetUnderlayLocation(ShinobiEssentials.SEssentialsSlidingOverlayLocation,System.Boolean)" />
				to control this.
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsSlidingOverlay.SetUnderlayLocation(ShinobiEssentials.SEssentialsSlidingOverlayLocation,System.Boolean)">
			<summary>
				The location of the <see cref="P:ShinobiEssentials.SEssentialsSlidingOverlay.Underlay" />
				- the <see cref="P:ShinobiEssentials.SEssentialsSlidingOverlay.Overlay" /> slides out to reveal
				the <see cref="P:ShinobiEssentials.SEssentialsSlidingOverlay.Underlay" /> anchored in this direction.
			</summary>
			<remarks>
				This method allows the location to be set with or without animating from the current state to the new state.
			</remarks>
			<param name="newLocation">
				The location to which the underlay should be moved.
			</param>
			<param name="animated">
				Specify <c>true</c> for the location change to be animated.
			</param>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlay.UnderlayRevealAmount">
			<summary>The size of the underlay</summary>
			<remarks>
				<para>
					Defaults to 0.25.
				</para>
				<para>
					If <see cref="P:ShinobiEssentials.SEssentialsSlidingOverlay.UnderlaySizeType" /> is set to
					<see cref="F:ShinobiEssentials.SEssentialsUnderlaySizeType.Pixel" /> then UnderlayRevealAmount defines the size of the underlay in pixels.
					This is a value between 0.0 and the width/height of the sliding overlay.
				</para>
				<para>
					If <see cref="P:ShinobiEssentials.SEssentialsSlidingOverlay.UnderlaySizeType" /> is set to
					<see cref="F:ShinobiEssentials.SEssentialsUnderlaySizeType.Ratio" /> then UnderlayRevealAmount defines the size of the underlay as a
					proportion of the view.
					In this case, the value should be between 0.0 and 1.0.
				</para>
  			</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlay.UnderlaySizeType">
			<summary>The method used to define the size of the underlay.</summary>
			<remarks>
				<para>
					Defaults to <see cref="F:ShinobiEssentials.SEssentialsUnderlaySizeType.Ratio" />.
				</para>
				<para>
					<see cref="F:ShinobiEssentials.SEssentialsUnderlaySizeType.Pixel" /> allows the size of the underlay to be given as a value
					of pixels in <see cref="P:ShinobiEssentials.SEssentialsSlidingOverlay.UnderlayRevealAmount" />.
				</para>
				<para>
					<see cref="F:ShinobiEssentials.SEssentialsUnderlaySizeType.Ratio" /> allows the size of the underlay to be defined as a proportion
					of the view in <see cref="P:ShinobiEssentials.SEssentialsSlidingOverlay.UnderlayRevealAmount" />.
				</para>
			</remarks>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsSlidingOverlay.ShowUnderlay(System.Boolean)">
			<summary>Show the <see cref="P:ShinobiEssentials.SEssentialsSlidingOverlay.Underlay" />, specifying animation</summary>
			<param name="animate">Whether the operation is animated</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsSlidingOverlay.HideUnderlay(System.Boolean)">
			<summary>Hide the <see cref="P:ShinobiEssentials.SEssentialsSlidingOverlay.Underlay" />, specifying animation</summary>
			<param name="animate">Whether the operation is animated</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsSlidingOverlay.ToggleUnderlay(System.Boolean)">
			<summary>Toggle the <see cref="P:ShinobiEssentials.SEssentialsSlidingOverlay.Underlay" />'s visibility, causing the
			<see cref="P:ShinobiEssentials.SEssentialsSlidingOverlay.Overlay" /> to slide over, revealing or concealing it.</summary>
			<param name="animate">Whether the operation is animated</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsSlidingOverlay.UnderlayHidden">
			<summary>A boolean indicating whether the <see cref="P:ShinobiEssentials.SEssentialsSlidingOverlay.Underlay" /> is currently hidden</summary>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsSlidingOverlayButtonPosition">
			<summary>Sliding overlay button position options: Left, Right</summary>
			<remarks>Used by <see cref="P:ShinobiEssentials.SEssentialsSlidingOverlayToolbar.ButtonPosition" />.</remarks>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsSlidingOverlayButtonPosition.Left">
			<summary>Button is on the left.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsSlidingOverlayButtonPosition.Right">
			<summary>Button is on the right.</summary>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsSlidingOverlayDelegate">
			<summary>Delegate object for the sliding overlay</summary>
			<remarks>These callback methods allow tracking of the sliding overlay's movement.
			The callbacks inform you of when the movement begins and ends, allowing you to perform appropriate actions</remarks>
		</member>

	    <member name="M:ShinobiEssentials.SEssentialsSlidingOverlayDelegate.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsSlidingOverlayDelegate.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsSlidingOverlayDelegate.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsSlidingOverlayDelegate.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsSlidingOverlayDelegate.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsSlidingOverlayDelegate.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>

	    <member name="M:ShinobiEssentials.SEssentialsSlidingOverlayDelegate.ConformsToProtocol(System.IntPtr)">
	      <summary>Checks whether this object conforms to a protocol.
	      </summary>
		  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
		  <param name="protocol">The protocol</param>
		  <returns>True if the object conforms to the protocol</returns>
	    </member>
			
		<member name="M:ShinobiEssentials.SEssentialsSlidingOverlayDelegate.UnderlayShouldAppear(ShinobiEssentials.SEssentialsSlidingOverlay)">
			<summary>Called before the underlay is revealed to determine whether or not it should be revealed</summary>
			<param name="slidingOverlay">The sliding overlay</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsSlidingOverlayDelegate.UnderlayWillAppear(ShinobiEssentials.SEssentialsSlidingOverlay)">
			<summary>Called when the subview is about to be revealed</summary>
			<param name="slidingOverlay">The sliding overlay</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsSlidingOverlayDelegate.UnderlayDidAppear(ShinobiEssentials.SEssentialsSlidingOverlay)">
			<summary>Called when the subview has been revealed</summary>
			<param name="slidingOverlay">The sliding overlay</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsSlidingOverlayDelegate.UnderlayShouldDisappear(ShinobiEssentials.SEssentialsSlidingOverlay)">
			<summary>Called before the underlay is hidden to determine whether or not it should be hidden</summary>
			<param name="slidingOverlay">The sliding overlay</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsSlidingOverlayDelegate.UnderlayWillDisappear(ShinobiEssentials.SEssentialsSlidingOverlay)">
			<summary>Called when the subview will hide</summary>
			<param name="slidingOverlay">The sliding overlay</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsSlidingOverlayDelegate.UnderlayDidDisappear(ShinobiEssentials.SEssentialsSlidingOverlay)">
			<summary>Called when the subview has hidden</summary>
			<param name="slidingOverlay">The sliding overlay</param>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsSlidingOverlayImagesWrapper">
			<summary>
				Used to customize the images used in a <c>SEssentialsSlidingOverlayStyle</c>.
			</summary>
			<remarks>
				Set the images on the wrapper which you wish to customize.
				When you create a style object with this wrapper, it will use these custom images.
				For any images which aren't set, the style will just use its default images.
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsSlidingOverlayImagesWrapper.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsSlidingOverlayImagesWrapper.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsSlidingOverlayImagesWrapper.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsSlidingOverlayImagesWrapper.#ctor">
			<summary>Default constructor.</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlayImagesWrapper.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsSlidingOverlayImagesWrapper.Dispose(System.Boolean)"> 			<summary>Releases unmanaged resources.</summary> 			<param name="disposing">True if called by Dispose, false if called from a finalizer</param> 		</member> 
		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlayImagesWrapper.ButtonImage">
			<summary>
				The image which is displayed for the main button on the toolbar.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlayImagesWrapper.ButtonPressedImage">
			<summary>
				The image which is displayed for the main button on the toolbar when it is pressed.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlayImagesWrapper.ButtonMask">
			<summary>
				The image mask which is used for the main button on the toolbar.
			</summary>
			<remarks></remarks>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsSlidingOverlayLocation">
			<summary>Sliding overlay location options: Left, Top, Right, Bottom</summary>
			<remarks>Used by <see cref="P:ShinobiEssentials.SEssentialsSlidingOverlay.UnderlayLocation" />.</remarks>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsSlidingOverlayLocation.Bottom">
			<summary>Underlay is along the bottom.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsSlidingOverlayLocation.Left">
			<summary>Underlay is along the left.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsSlidingOverlayLocation.Right">
			<summary>Underlay is along the right.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsSlidingOverlayLocation.Top">
			<summary>Underlay is along the top.</summary>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsUnderlaySizeType">
			<summary>Underlay size type options: Pixel, Ratio</summary>
			<remarks>Used by <see cref="P:ShinobiEssentials.SEssentialsSlidingOverlay.UnderlaySizeType" /></remarks>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsUnderlaySizeType.Pixel">
			<summary>Denotes sizes are measured in pixels.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsUnderlaySizeType.Ratio">
			<summary>Denotes sizes are measured as a ratio.</summary>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsSlidingOverlayStyle">
			<summary>The SEssentialsSlidingOverlayStyle defines the styling for the SEssentialsSlidingOverlay class.</summary>
			<remarks>
				<para>
					To modify the look of the sliding overlay from its default settings, update properties on this style object.
				</para><para>
					In the style, you can customize the following aspects of a sliding overlay:
					<list type="bullet">
						<item>
							<term>
								The overlay. This is the main UIView in the sliding overlay. You can slide it to the side
								to expose the underlay beneath it.
							</term>
						</item>
						<item>
							<term>
								The underlay. This is the view which is usually hidden under the overlay. You can slide the
								overlay to the side to reveal it.
							</term>
						</item>
						<item><term>The toolbar.</term></item>
						<item>
							<term>
								The decoration which is applied to the sliding overlay.
								This is described in more detail below.
							</term>
						</item>
					</list>
				</para><para>
					SEssentialsSlidingOverlayStyle derives from SEssentialsStyle, and so it is initialized with a
					SEssentialsTheme object.
					The theme provides the default settings for the style.
				</para><para>
					The following default settings are taken from the theme:
					<list type="bullet">
						<item>
							<term>
								The <c>PrimaryTintColor</c> on the theme is used for the overlay (<c>OverlayTintColor</c>) and
								the toolbar (<c>ToolbarTintColor</c>).
							</term>
						</item>
						<item>
							<term>
								The <c>PrimaryTexture</c> on the theme is used for the background texture of the overlay
								(<c>OverlayTexture</c>) and the toolbar (<c>ToolbarTexture</c>).
							</term>
						</item>
						<item>
							<term>
								The <c>SecondaryTintColor</c> on the theme is used for the underlay (<c>UnderlayTintColor</c>).
							</term>
						</item>
						<item>
							<term>
								The <c>SecondaryTexture</c> on the theme is used for the background texture of the underlay
								(<c>UnderlayTexture</c>).
							</term>
						</item>
						<item>
							<term>
								The <c>TertiaryTintColor</c> on the theme is used for the toolbar button (<c>ButtonTintColor</c>).
							</term>
						</item>
					</list>
				</para><para>
					Decoration is applied to the sliding overlay.
					This refers to the shine which is applied to the toolbar, the chisel which is drawn between the
					toolbar and the overlay, and the drop shadow which is drawn under the overlay onto the underlay.
					The theme provides the following default settings for decoration:
					<list type="bullet">
						<item>
							<term>
								The <c>ShadowColor</c> and <c>ShadowDepth</c> properties on the theme map to the
								properties with the same name on the style.
							</term>
						</item>
						<item>
							<term>
								The <c>ShineColor</c> on the theme sets the color of the shine on the toolbar (<c>ShineColor</c>).
							</term>
						</item>
						<item>
							<term>
								The <c>PrimaryDecorationTintColor</c> and the <c>SecondaryDecorationTintColor</c>
								set the primary and secondary colors for the chisel between the toolbar and the overlay
								(<c>ChiselPrimaryColor</c> and <c>ChiselSecondaryColor</c>).
							</term>
						</item>
					</list>
				</para>
			</remarks>
		</member>

	    <member name="M:ShinobiEssentials.SEssentialsSlidingOverlayStyle.#ctor">
	    	<summary>Constructor with default button styles and a default theme.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsSlidingOverlayStyle.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsSlidingOverlayStyle.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsSlidingOverlayStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
		
		<member name="M:ShinobiEssentials.SEssentialsSlidingOverlayStyle.#ctor(ShinobiEssentials.SEssentialsTheme)">
			<summary>
				Constructor with default button styles.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsSlidingOverlayStyle.#ctor(MonoTouch.UIKit.UIImage,MonoTouch.UIKit.UIImage,MonoTouch.UIKit.UIImage)">
			<summary>
				Constructor that overrides the default button images and the default image mask.
			</summary>
			<remarks>
				<para>
					DEPRECATED: Use <see cref="C:ShinobiEssentials.SEssentialsSlidingOverlayStyle(ShinobiEssentials.SEssentialsTheme,ShinobiEssentials.SEssentialsSlidingOverlayImagesWrapper)" /> instead.
				</para>
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsSlidingOverlayStyle.#ctor(ShinobiEssentials.SEssentialsTheme,ShinobiEssentials.SEssentialsSlidingOverlayImagesWrapper)">
			<summary>
				Constructor that overrides the default button images and masks.
			</summary>
			<remarks>
				See the <see cref="T:ShinobiEssentials.SEssentialsSlidingOverlayImagesWrapper" /> for more details.
			</remarks>
		</member>
			
	    <member name="P:ShinobiEssentials.SEssentialsSlidingOverlayStyle.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsSlidingOverlayStyle.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlayStyle.ButtonImage">
			<summary>The image which is displayed for the main button on the toolbar.</summary>
			<remarks>To customize this image, you can specify the image when you create the style.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlayStyle.ButtonMask">
			<summary>The image mask which is used for the main button on the toolbar.</summary>
			<remarks>To customize this mask, you can specify the mask to use when you create the style.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlayStyle.ButtonPressedImage">
			<summary>The image which is displayed for the main button on the toolbar when it is pressed.</summary>
			<remarks>To customize this image, you can specify the image when you create the style.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlayStyle.ButtonTintColor">
			<summary>The color of the main button on the toolbar.</summary>
			<remarks>This defaults to the <c>tertiaryTintColor</c> from the theme.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlayStyle.Decoration">
			<summary>DEPRECATED: This property is no longer used.</summary>
			<remarks>
				If you would like to configure the shine, chisel or shadow on the control, you can use the specific
				properties which relate to those elements of the control, such as <c>ShineColor</c>, <c>ShadowColor</c>,
				<c>ChiselPrimaryColor</c>, etc.
			</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlayStyle.OverlayTexture">
			<summary>The texture used for the overlay.</summary>
			<remarks>This defaults to the <c>PrimaryTexture</c> from the theme.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlayStyle.OverlayTintColor">
			<summary>The color of the overlay.</summary>
			<remarks>This defaults to the <c>PrimaryTintColor</c> from the theme.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlayStyle.ShadowDepth">
			<summary>The depth of the shadow above the underlay.</summary>
			<remarks>Defaults to the <c>ShadowDepth</c> of the theme.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlayStyle.ToolbarButtonPadding">
			<summary>The image which is displayed for the main button on the toolbar.</summary>
			<remarks>Defaults to 6 points</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlayStyle.ToolbarTexture">
			<summary>The texture used for the toolbar.</summary>
			<remarks>This defaults to the <c>PrimaryTexture</c> from the theme.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlayStyle.ToolbarTintColor">
			<summary>The color of the main button on the toolbar.</summary>
			<remarks>This defaults to the <c>PrimaryTintColor</c> from the theme.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlayStyle.UnderlayTexture">
			<summary>The texture used for the underlay.</summary>
			<remarks>This defaults to the <c>SecondaryTexture</c> from the theme.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlayStyle.UnderlayTintColor">
			<summary>The color of the underlay.</summary>
			<remarks>This defaults to the <c>SecondaryTintColor</c> from the theme.</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlayStyle.ShadowColor">
			<summary>
				The color of the shadow above the underlay.
			</summary>
			<remarks>
				Defaults to the <c>ShadowColor</c> of the theme.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlayStyle.ShineColor">
			<summary>
				The color of the shine layer above the toolbar.
			</summary>
			<remarks>
				Defaults to the <c>ShineColor</c> of the theme.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlayStyle.ChiselPrimaryColor">
			<summary>
				The top color of the chisel.
			</summary>
			<remarks>
				Defaults to the <c>PrimaryDecorationTintColor</c> of the theme.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlayStyle.ChiselSecondaryColor">
			<summary>
				The bottom color of the chisel.
			</summary>
			<remarks>
				Defaults to the <c>SecondaryDecorationTintColor</c> of the theme.
			</remarks>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsSlidingOverlayToolbar">
			<summary>The SEssentialsSlidingOverlayToolbar class provides access to the button and toolbar area for custom styling.</summary>
		</member>

	    <member name="M:ShinobiEssentials.SEssentialsSlidingOverlayToolbar.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsSlidingOverlayToolbar.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsSlidingOverlayToolbar.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsSlidingOverlayToolbar.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
		<member name="M:ShinobiEssentials.SEssentialsSlidingOverlayToolbar.#ctor(System.Drawing.RectangleF)">
		  <summary>Instantiates with the specified frame rectangle.
		  </summary>
		  <remarks></remarks>
		  <param name="frame">The frame rectangle</param>
		</member>
			
	    <member name="P:ShinobiEssentials.SEssentialsSlidingOverlayToolbar.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsSlidingOverlayToolbar.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlayToolbar.ButtonPosition">
			<summary>Defines the location of the button in the toolbar.</summary>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsSlidingOverlayToolbar.Button">
			<summary>The button that opens and closes the overlay.</summary>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsStyle">
			<summary>The base class for all styles in ShinobiEssentials</summary>
			<remarks>
				<para>SEssentialsStyle is the base class for all styles in ShinobiEssentials. Each
				  control has its own particular style object, which it uses to determine its
				  appearance.</para>
				<para>SEssentialsStyle objects are initialized from an instance of SEssentialsTheme.  The theme is the base on which any concrete style object is built. This allows us to ensure that controls across an application have a common look and feel.</para>
				<para>Style objects can be initialized with or without a particular theme.  If a style object is not initialized with a concrete instance of a theme, it uses the global theme provided by SEssentialsTheme.</para>
				<para>All concrete style classes inherit from this base class.</para>
			</remarks>
		</member>

	    <member name="M:ShinobiEssentials.SEssentialsStyle.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsStyle.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsStyle.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsStyle.#ctor(ShinobiEssentials.SEssentialsTheme)">
			<summary>Initialize the style with a particular theme.</summary>
			<param name="theme">The theme</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsStyle.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsStyle.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsStyle.Theme">
			<summary>DEPRECATED: We create a style object with a theme, but we no longer hold a persistent reference to it.</summary>
			<remarks>
				<para>
					If you wish to update your style object with a theme, you should call <c>ApplyTheme</c> instead.
				</para><para>
					This defaults to use the global theme but when set it can listen to a specific theme.
				</para>
			</remarks>
	    </member>

		<member name="M:ShinobiEssentials.SEssentialsStyle.ApplyTheme(ShinobiEssentials.SEssentialsTheme)">
			<summary>
				Applies the properties of the specified theme to this style object.
			</summary>
			<remarks>
				<para>
					Each concrete style implementation will use the properties of the theme in its own way.
				</para><para>
					For example, the progress indicator style will use the secondary tint color on the theme to set
					its tint color.
				</para>
			</remarks>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsTab">
			<summary>SEssentialsTab holds information about a single tab within SEssentialsTabbedView.</summary>
			<remarks>It contains a header view, which is an instance of the SEssentialsTabHeaderViewProtocol.  The header view controls the appearance of the tab in the tabbed view.  The default implementation of the header view is SEssentialsTabHeaderView.  If you create a tab and just specify its name and icon in the init method, then the default implementation of the header view is used.  You can optionally specify your own header view if you require custom appearance or behavior for your tab.</remarks>
		</member>

	    <member name="M:ShinobiEssentials.SEssentialsTab.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsTab.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTab.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTab.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTab.#ctor(System.String,MonoTouch.UIKit.UIImage)">
			<summary>A SEssentialsTab is typically created like this with the default SEssentialsTabHeaderView being used for display.</summary>
			<param name="name">The tab name displayed in the tab header</param>
			<param name="icon">The tab icon displayed in the tab header</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTab.#ctor(System.String,MonoTouch.UIKit.UIImage,ShinobiEssentials.SEssentialsTabHeaderViewProtocol)">
			<summary>Use this constructor to assign a custom SEssentialsTabHeaderView class that implements SEssentialsTabbedHeaderViewProtocol.</summary>
			<param name="name">The tab name displayed in the tab header</param>
			<param name="icon">The tab icon displayed in the tab header</param>
			<param name="customTabView">The object that implements SEssentialsTabHeaderViewProtocol</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTab.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTab.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTab.ConformsToProtocol(System.IntPtr)">
	      <summary>Checks whether this object conforms to a protocol.
	      </summary>
		  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
		  <param name="protocol">The protocol</param>
		  <returns>True if the object conforms to the protocol</returns>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTab.Icon">
			<summary>A UIImage displayed in the tab.</summary>
			<remarks>The icon is scaled to fit and displayed in the tab.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTab.Name">
			<summary>The name is displayed in the tab.</summary>
			<remarks>The name does not need to be unique</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTab.ParentTabbedView">
			<summary>The containing SEssentialsTabbedView.</summary>
			<remarks>This is set automatically when the SEssentialsTab is added to the SEssentialsTabbedView, which will probably have been added to a parent view with AddSubview. 
			If you set it explicitly it is your responsibility to hold a reference to the TabbedView (AddSubview will have done this for you), to avoid it being garbage collected. 
			This property does not itself do this for you (unlike most properties in the API) to match the behavior of the native code.
			</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTab.Removable">
			<summary>Indicates whether the tab can be removed.</summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTab.TabHeaderView">
			<summary>The view that represents this SEssentialsTab in the tab bar.</summary>
			<remarks>
				<para>The tab header view can be reimplemented by using SEssentialsTabHeaderViewProtocol.</para>
				<para>There are a number of ways to implement this:</para>
				<para>1. Subclass SEssentialsTabHeaderViewProtocol, implement the abstract methods and set it into the TabHeaderView property on this class.
				This gives you the flexibility to provide whatever behavior you wish, but requires your implementation to subclass UIView rather than any of its subclasses.</para>
				<para>2. Subclass any subclass of UIView, add your own override methods (the same set as SEssentialsTabHeaderViewProtocol has, with the same ExportAttributes) and set it into the WeakTabHeaderView property on this class.
				This gives you the flexibility of 1. above and allows you to use any UIView subclass, but is the most work.</para> 
				<para>3. Subclass SEssentialsTabHeaderView and set it into the WeakTabHeaderView property on this class.
				This is the simplest option, but defaults to the out of the box behavior for most of its behavior.</para>
				<para>Important. It is your responsibility to hold a reference to your object, to avoid it being garbage collected. 
				This property does not do this for you (unlike most properties in the API) to match the behavior of the native code.</para>
			</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTab.WeakTabHeaderView">
			<summary>A weakly typed view that represents this SEssentialsTab in the tab bar.</summary>
			<remarks><see cref="P:ShinobiEssentials.SEssentialsTab.TabHeaderView"/></remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTab.Tag">
			<summary>A tag.</summary>
			<remarks>The tag property is provided as a convenience when using SEssentialsTab references is not appropriate to the application. e.g. in the DataSource implementation.</remarks>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTab.Hash">
			<summary>A hash code for the object.</summary>
			<remarks>A hash is required for NSCopying protocol use in dictionary</remarks>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTab.IsEqual(MonoTouch.Foundation.NSObject)">
			<summary>Checks object equality.</summary>
			<remarks>IsEqual is required for NSCopying protocol use in a dictionary</remarks>
			<param name="anObject">The object to check equality against</param>
	    </member>
			

		<member name="T:ShinobiEssentials.SEssentialsTabOverflowProtocol">
			<summary>Protocol for objects that are able to select tabs</summary>
		</member>

	    <member name="M:ShinobiEssentials.SEssentialsTabOverflowProtocol.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsTabOverflowProtocol.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabOverflowProtocol.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabOverflowProtocol.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
		<member name="M:ShinobiEssentials.SEssentialsTabOverflowProtocol.#ctor(System.Drawing.RectangleF)">
		  <summary>Instantiates with the specified frame rectangle.
		  </summary>
		  <remarks></remarks>
		  <param name="frame">The frame rectangle</param>
		</member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabOverflowProtocol.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabOverflowProtocol.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabOverflowProtocol.ConformsToProtocol(System.IntPtr)">
	      <summary>Checks whether this object conforms to a protocol.
	      </summary>
		  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
		  <param name="protocol">The protocol</param>
		  <returns>True if the object conforms to the protocol</returns>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabOverflowProtocol.OnDropDown(ShinobiEssentials.SEssentialsTabbedView,ShinobiEssentials.SEssentialsTab[])">
			<summary>Called when dropdown button is touched.</summary>
			<param name="tabbedView">The parent tabbed view</param>
			<param name="tabs">An SEssentialsTab for each tab that should be shown in the picker.</param>
	    </member>
	    

		<member name="T:ShinobiEssentials.SEssentialsTabBarProtocol">
			<summary>A protocol defining the SEssentialsTabbedView interaction with the tabs in the tab area</summary>
			<remarks>Implementations of this can provide a variety of layout formats e.g. scrollable tabs,  dropdown tabs. A concrete implementation of this protocol is supplied in SEssentialsScrollableTabBar.</remarks>
		</member>

	    <member name="M:ShinobiEssentials.SEssentialsTabBarProtocol.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsTabBarProtocol.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabBarProtocol.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabBarProtocol.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
		<member name="M:ShinobiEssentials.SEssentialsTabBarProtocol.#ctor(System.Drawing.RectangleF)">
		  <summary>Instantiates with the specified frame rectangle.
		  </summary>
		  <remarks></remarks>
		  <param name="frame">The frame rectangle</param>
		</member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabBarProtocol.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabBar.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabBarProtocol.ConformsToProtocol(System.IntPtr)">
	      <summary>Checks whether this object conforms to a protocol.
	      </summary>
		  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
		  <param name="protocol">The protocol</param>
		  <returns>True if the object conforms to the protocol</returns>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabBarProtocol.ActivateTab(ShinobiEssentials.SEssentialsTab)">
			<summary>Activate a tab</summary>
			<remarks>Typically this will highlight the tab by calling the SEssentialsTabbedView ActivateTab method. Depending on the implementation of the SEssentialsTabBar this
 should also move a previously off screen tab to be on screen.</remarks>
			<param name="tab">The tab to activate</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabBarProtocol.AddTab(ShinobiEssentials.SEssentialsTab)">
			<summary>Add a tab that will be rendered on screen.</summary>
			<remarks>The rendered view will be an SEssentialsTabHeaderView found on the property of the tab at tab.TabHeaderView. 
 The added tab should start in the inactive state. If the SEssentialsTabBarProtocol implementation cannot fit this new tab on screen it can do
 nothing as the SEssentialsTab will be managed by the SEssentialsTabbedView until it becomes active.</remarks>
			<param name="tab">The tab to add.</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabBarProtocol.AddTab(ShinobiEssentials.SEssentialsTab,System.Int32)">
			<summary>Add a tab that will be rendered on screen at a given index.</summary>
			<remarks>The rendered view will be an SEssentialsTabHeaderView found on the property of the tab at tab.TabHeaderView. 
 The added tab should start in the inactive state. If the SEssentialsTabBarProtocol implementation cannot fit this new tab on screen it can do
 nothing as the SEssentialsTab will be managed by the SEssentialsTabbedView until it becomes active.</remarks>
			<param name="tab">The tab to add.</param>
			<param name="index">The index to add the tab at.</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabBarProtocol.AllDisplayedTabs">
			<summary>Get an array of all the tabs displayed in SEssentialsTabBar</summary>
			<remarks>This is used to compute which tabs to show in the overflow dropdown SEssentialsOverflowDropdownView.</remarks>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabBarProtocol.MoveTab(ShinobiEssentials.SEssentialsTab,System.Int32)">
			<summary>Move a tab to a destination index.</summary>
			<remarks>For some implementations this may mean that the tab will no longer be on screen
 in which case the tab should be removed and the next available tab moved in.</remarks>
			<param name="tab">The tab to move</param>
			<param name="destinationIndex">The index of where the tab should be moved to </param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabBarProtocol.RemoveTab(ShinobiEssentials.SEssentialsTab)">
			<summary>Remove a tab.</summary>
			<remarks>If the removed tab was off screen then no action is required. If the tab was on screen then ensure that AllDisplayedTabs 
 is maintained correctly. In some implementations this may result in a previously off screen tab becoming on screen to fill the gap left 
 by the removed tab.</remarks>
			<param name="tab">The tab to remove</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabBarProtocol.SetEditable(System.Boolean)">
			<summary>Called when the user sets the Editable flag on SEssentialsTabbedView.</summary>
			<remarks>The implementation should not allow tabs to be removed or reordered when false. When it is true a typical implementation of SEssentialsTabHeaderView will show a delete button (icon) that should
 be configured to handle presses and call back to the SEssentialsTabbedView with RemoveTab.</remarks>
			<param name="editable"></param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabBarProtocol.SetTabbedView(ShinobiEssentials.SEssentialsTabbedView)">
			<summary>Called when the SEssentialsTabBar is added to the SEssentialsTabbedView.</summary>
			<remarks>Any initialization of graphics should occur in this call.</remarks>
			<param name="tabbedView"></param>
	    </member>

		<member name="M:ShinobiEssentials.SEssentialsTabBarProtocol.ReloadTabs">
			<summary>
				Called to indicate the tab bar has changed in some way.
			</summary>
			<remarks>
				Each tab should then be updated to reflect this.
			</remarks>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsTabBarPosition">
			<summary>Tab bar position options: Top, Bottom</summary>
			<remarks>Used by <see cref="P:ShinobiEssentials.SEssentialsTabbedView.TabBarPosition" />.</remarks>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsTabBarPosition.Bottom">
			<summary>Tabs along the bottom.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsTabBarPosition.Top">
			<summary>Tabs along the top.</summary>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsTabbedView">
			<summary>A UIView which comprises a set of subviews, only one of which is visible at any given time.</summary>
			<remarks>
				<para>
					The SEssentialTabbedView is a UIView which comprises a set of subviews, only one of which is visible at any given time.
					Navigating between these subviews is achieved via a horizontal tab bar.
				</para>
				<para>
					The SEssentialsTabbedView requires a DataSource - an object which inherits the <c>SEssentialsTabbedViewDataSource</c> protocol.
					This will provide the content view associated with each tab as the user activates them in turn.
				</para>
				<para>
					The code below shows how to create a simple tabbed view, with 2 tabs:
					<code>SEssentialsTabbedView tabbedView = new SEssentialsTabbedView();
tabbedView.DataSource = this;
tabbedView.AddTab(new SEssentialsTab("tab1", null));
tabbedView.AddTab(new SEssentialsTab("tab2", null));</code>
				</para>
				<para>
					You also need to implement the following method:
					<code>[ExportAttribute ("tabbedView:contentForTab:")]
UIView GetContentForTab(SEssentialsTabbedView tabbedView, SEssentialsTab tab) {
    // Create and return a UIView appropriate for the given tab here...
}</code>
				</para>
				<para>
					Alternatively you could create your own <see cref="T:ShinobiEssentials.SEssentialsTabbedViewDataSource" /> subclass and implement
					<see cref="M:ShinobiEssentials.SEssentialsTabbedViewDataSource.GetContent(ShinobiEssentials.SEssentialsTabbedView,ShinobiEssentials.SEssentialsTab)" />
					there.
				</para>
				
				<para>Further Details</para>
				<para>
					The SEssentialsTabbedView can be used to hold several UIViews that the user can switch between by touching the tabs.
					The tabbed view can hold many tabs (<see cref="T:ShinobiEssentials.SEssentialsTab" />) and these appear in the tab bar.
					The tab bar is an implementation of the protocol <c>SEssentialsTabBarProtocol</c> and manages the display of multiple tabs where
					only one tab can be active at an one time.
				</para>
				<para>
					A SEssentialsTab object holds information about the tab including its name and a representative icon but importantly does not hold
					any reference to the view associated with the tab.
					This allows the tab to be a relatively light weight object and the associated view is supplied by the DataSource
					(<see cref="T:ShinobiEssentials.SEssentialsTabbedViewDataSource" />).
					Only one SEssentialsTab can be active at one time and the tabs can be added, reordered and removed when in edit mode.
				</para>
				<para>
					The appearance of the tab is controlled by the SEssentialsTabHeaderView and a customized version of this can be used to take full
					control of the tabs appearance and behavior.
				</para>
				<para>
					The default SEssentialsTabHeaderView references a SEssentialsTabStyle object to get its graphics, font and size and this is another
					option for controlling a tabs appearance.
				</para>
				<para> Tabs appear in the order in which they were added but this ordering can be
				 changed when the tabbed view is in edit mode. Tabs can be moved by dragging
				 them in the tab area and can also be removed by touching the cross symbol to
				 close a tab. Callbacks are generated when the tabs are edited and these can be
				 handled by implementing the SEssentialsTabbedViewDelegate. The implementer may
				 provide various ways to add new tabs (e.g. browser long tap on links) but the
				 tabbed view can also show a 'new tab' button. When this button is enabled the
				 delegate will receive a callback when it is pressed and the implementer can
				 provide a default tab and view.</para>
				<para> The tab headers are shown in the tab bar and the content in the SEssentialsTabContentView.</para>
				<para>Styling</para>
 				<para>The SEssentialsTabbedView has a style object, which is an instance of SEssentialsTabbedViewStyle.
 This manages the look and feel of the control by setting things like the background color and background
 texture of the tab bar. The style object should always be used to update the look of the control,
 rather than accessing the tabbed view and setting its properties directly.</para>
				<para>When using the default implementation supplied, the style has precedence over any visual changes which
 are made to the tabbed view directly. For example, if you were to set a property such as the background
 color on a SEssentialsTabHeaderView object itself, this change will be overridden the next time the style is updated.
 That is why it is important to use the style to manage the look and feel of the control.</para>
				<para>
					If a style change will result in the tabs changing size, such as updating the font or title of a tab,
					the tab bar must be updated by calling <see cref="M:ShinobiEssentials.SEssentialsTabBarProtocol.ReloadTabs" />.
				</para>
			</remarks>
		</member>

	    <member name="M:ShinobiEssentials.SEssentialsTabbedView.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsTabbedView.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedView.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedView.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedView.#ctor(System.Drawing.RectangleF)">
			<summary>Initialize view with the specified frame rectangle.</summary>
			<remarks>The SEssentialsTabBarPosition defaults to SEssentialsTabBarPosition.Top and the tabBarView is initialized with a default SEssentialsScrollableTabBar that allows for multiple tabs that can be scrolled.</remarks>
			<param name="frame">A frame rectangle defining the view's extent</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedView.#ctor(System.Drawing.RectangleF,ShinobiEssentials.SEssentialsTabBarPosition)">
			<summary>Initialize view with the specified frame rectangle and tab bar position.</summary>
			<param name="frame">A frame rectangle defining the view's extent</param>
			<param name="tabBarPosition">The position of the tab bar within the frame</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedView.#ctor(System.Drawing.RectangleF,ShinobiEssentials.SEssentialsTabBarPosition,ShinobiEssentials.SEssentialsTabbedViewStyle)">
			<summary>Initialize view with the specified frame rectangle, tab bar position and style.</summary>
			<param name="frame">A frame rectangle defining the view's extent</param>
			<param name="tabBarPosition">The position of the tab bar within the frame</param>
			<param name="style">The style</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedView.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedView.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedView.ActiveTab">
			<summary>The currently active (displayed) tab.</summary>
			<remarks>The active tab changes when the user selects a tab by tapping the SEssentialsTabHeaderView and 
 the active tab may also change by being set programmatically or change after a tab is removed. This readonly property 
 returns the currently active tab or null if no tabs have yet been added to the control.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedView.AllTabs">
			<summary>All tabs (including off screen ones) in display order.</summary>
			<remarks>This returns an array of SEssentialsTab where the order reflects the order the tabs are displayed on screen in the tab bar.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedView.ContentViewArea">
			<summary>The area in which the content of a tab will be displayed.</summary>
			<remarks>You can customize this if you want to style all your tabs to have a particular appearance.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedView.DataSource">
			<summary>DataSource to provide views for tabs.</summary>
			<remarks>
				<para>See SEssentialsTabbedViewDataSource for full details on the required object that must be supplied for the SEssentialsTabbedView to function.</para>
				<para>Important. It is your responsibility to hold a reference to your data source (if it is a separate object), to avoid it being garbage collected. 
				This property does not do this for you (unlike most properties in the API) to match the behavior of the native code.</para>
			</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedView.WeakDataSource">
			<summary>Weakly typed DataSource.</summary>
			<remarks><see cref="P:ShinobiEssentials.SEssentialsTabbedView.DataSource"/></remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedView.Delegate">
			<summary>Delegate to control appearance and interaction.</summary>
			<remarks>
				<para>See SEssentialsTabbedViewDelegate for full details of all delegate calls that are generated by this view.</para>
				<para>Important. It is your responsibility to hold a reference to your delegate (if it is a separate object), to avoid it being garbage collected. 
				This property does not do this for you (unlike most properties in the API) to match the behavior of the native code.</para>
			</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedView.WeakDelegate">
			<summary>Weakly types Delegate.</summary>
			<remarks><see cref="P:ShinobiEssentials.SEssentialsTabbedView.Delegate"/></remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedView.Editable">
			<summary>Determines if tabs can be edited after creation.</summary>
			<remarks>When true tabs can be reordered and removed. When this property has value false the control contains a static list of tabs that cannot be reordered but can be activated by touching them. Defaults to true.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedView.HasNewTabButton">
			<summary>Controls the availability of the 'new tab' button on the tab bar.</summary>
			<remarks>The callback associated by the 'new tab' button is the <see cref="M:ShinobiEssentials.SEssentialsTabbedViewDataSource.GetTab"/> method, which must be implemented to create new tabs when the button is clicked. Defaults to false.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedView.HasOverflowDropdown">
			<summary>Controls the availability of the 'overflow picker' button.</summary>
			<remarks>The 'overflow picker' button is displayed when all tabs do not fit on the tab bar and when pressed displays a drop down list of all tabs. Tabs can be toggled from this drop down list. Defaults to true.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedView.ResizeToText">
			<summary>When true the tab width is sized to fit the text it contains.</summary>
			<remarks>Defaults to true.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedView.MaximumNumberOfTabsAllowed">
			<summary>The limit of tabs that can be added.</summary>
			<remarks>Defaults to 16. When the limit is reached no further callbacks occur when the add tab button is pressed.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedView.Style">
			<summary>Visual styling.</summary>
			<remarks>A subclass of SEssentialsTabbedViewStyle can be assigned to the constructor to provide a customized tab style.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedView.TabOverflowDropdown">
			<summary>The tab overflow picker.</summary>
			<remarks>
				<para>Assign to this property to change the behavior of the drop down picker that is used to select tabs that are not displayed on screen</para>
				<para>There are a number of ways to implement this:</para>
				<para>1. Subclass SEssentialsTabOverflowProtocol, implement the abstract OnDropDown method and set it into the TabAreaOverflowDropdown property on this class.
				This gives you the flexibility to provide whatever item selection mechanism you wish, but requires your implementation to subclass UIView rather than any of its subclasses.</para>
				<para>2. Subclass any subclass of UIView, add your own OnDropDown method (with the [ExportAttribute ("tabbedView:showTabs:")] attribute) and set it into the WeakTabAreaOverflowDropdown property on this class.
				This gives you the flexibility of 1. above and allows you to use any UIView subclass, but is the most work.</para> 
				<para>3. Subclass SEssentialsOverflowDropdownView and set it into the WeakTabAreaOverflowDropdown property on this class.
				This is the simplest option, but defaults to the out of the box behavior for OnDropDown</para>
			</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedView.WeakTabOverflowDropdown">
			<summary>A weakly typed tab overflow picker.</summary>
			<remarks><see cref="P:ShinobiEssentials.SEssentialsTabbedView.TabOverflowDropdown"/></remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedView.TabBarPosition">
			<summary>The tab bar position.</summary>
			<remarks>Tabs are displayed at top of view by default but can be changed in the constructor. This readonly property reflects that position</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedView.TabBarView">
			<summary>The tab bar view.</summary>
			<remarks>
				<para>The tabbed area can be reimplemented by using the SEssentialsTabBarProtocol protocol.</para>
				<para>There are a number of ways to implement this:</para>
				<para>1. Subclass SEssentialsTabBarProtocol, implement the abstract methods and set it into the TabBarView property on this class.
				This gives you the flexibility to provide whatever behavior you wish, but requires your implementation to subclass UIView rather than any of its subclasses.</para>
				<para>2. Subclass any subclass of UIView, add your own override methods (the same set as SEssentialsTabBarProtocol has, with the same ExportAttributes) and set it into the WeakTabBarView property on this class.
				This gives you the flexibility of 1. above and allows you to use any UIView subclass, but is the most work.</para> 
				<para>3. Subclass SEssentialsScrollableTabBar and set it into the WeakTabBarView property on this class.
				This is the simplest option, but defaults to the out of the box behavior for most of its behavior</para>
				<para>Important. It is your responsibility to hold a reference to your object, to avoid it being garbage collected. 
				This property does not do this for you (unlike most properties in the API) to match the behavior of the native code.</para>
			</remarks>
	    </member>
						
	    <member name="P:ShinobiEssentials.SEssentialsTabbedView.WeakTabBarView">
			<summary>A weakly typed tab bar view.</summary>
			<remarks><see cref="P:ShinobiEssentials.SEssentialsTabbedView.TabBarView"/></remarks>
	    </member>

	    <member name="M:ShinobiEssentials.SEssentialsTabbedView.ActivateTab(ShinobiEssentials.SEssentialsTab)">
			<summary>Activate a tab.</summary>
			<param name="tab">The tab to be activated</param>
			<remarks>This results in the tab becoming rendered in the active state in the tab bar and its associated content view 
 being loaded into the ContentViewArea. If a different tab was previously active it will become rendered inactive in the tab bar
 and its associated content will be removed from the ContentViewArea.</remarks>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedView.ActivateTabDisplayedAtIndex(System.Int32)">
			<summary>Activate a tab at a given display index</summary>
			<remarks>This results in the tab becoming rendered in the active state in the tab bar and its associated content view 
 being loaded into the ContentViewArea. If a different tab was previously active it will become rendered inactive in the tab bar
 and its associated content will be removed from the ContentViewArea.</remarks>
			<param name="index">The index of the tab to be activated</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedView.AddTab(ShinobiEssentials.SEssentialsTab)">
			<summary>Adds a new tab to the tab bar, initially in an inactive state.</summary>
			<remarks>An SEssentialsTab should be constructed with a name and icon for use in this call. The content associated with the SEssentialsTab
 is provided by the DataSource delegate (typically this association is made prior to the AddTab call). If the added tab is to 
 become immediately active then you should call ActivateTab after its addition.</remarks>
			<param name="tab">The tab to be added</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedView.AddTab(ShinobiEssentials.SEssentialsTab,System.Int32)">
			<summary>Adds a new tab to the tab bar, initially in an inactive state.</summary>
			<remarks>An SEssentialsTab should be constructed with a name and icon for use in this call. The content associated with the SEssentialsTab
 is provided by the DataSource delegate (typically this association is made prior to the AddTab call). If the added tab is to 
 become immediately active then you should call ActivateTab after its addition.</remarks>
			<param name="tab">The tab to be added</param>
			<param name="index">The index at which to add the tab</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedView.ContentViewBounds">
			<summary>Get the content view size</summary>
			<remarks>When a view is created to be associated with an SEssentialsTab this method provides the size of the ContentViewArea where it will be displayed.
 If the size is ignored and an arbitrary size view created then the SEssentialsTabContentView must handle this (the default implementation 
 derives from UIScrollView and so can supprt any size content).</remarks>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedView.MoveTab(ShinobiEssentials.SEssentialsTab,System.Int32)">
			<summary>Moves a tab programmatically</summary>
			<param name="tab">The tab to move</param>
			<param name="destinationIndex">The index to which the tab is to me be moved</param>
			<remarks>If it is necessary to change the order of the tabs as displayed on screen then this interface allows tabs to be moved.</remarks>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedView.RemoveTab(ShinobiEssentials.SEssentialsTab)">
			<summary>Remove a tab.</summary>
			<remarks>This removes the tab from the tab bar and if its content view is active that is removed from the ContentViewArea. The next tab is then made active causing its content view to be displayed.</remarks>
			<param name="tab">The tab to remove</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedView.RemoveTabDisplayedAtIndex(System.Int32)">
			<summary>Remove a tab at a given display index</summary>
			<remarks>This removes the tab from the tab bar and if its content view is active that is removed from the ContentViewArea. The next tab is then made active causing its content view to be displayed.</remarks>
			<param name="index">The index of the tab to remove</param>
	    </member>

		<member name="M:ShinobiEssentials.SEssentialsTabbedView.ApplyTheme(ShinobiEssentials.SEssentialsTheme)">
			<summary>
				Applies the specified theme to the tabbed view.
			</summary>
			<remarks></remarks>
		</member>

		<member name="T:ShinobiEssentials.SEssentialsTabbedViewCustomImagesWrapper">
			<summary>
				Used to customize the images used in a SEssentialsTabbedViewStyle.
			</summary>
			<remarks>
				Set the images on the wrapper which you wish to customize. When you create a style object with this wrapper,
				it will use these custom images. For any images which aren't set, the style will just use its default images.
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsTabbedViewCustomImagesWrapper.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsTabbedViewCustomImagesWrapper.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsTabbedViewCustomImagesWrapper.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsTabbedViewCustomImagesWrapper.#ctor">
			<summary>Default constructor.</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTabbedViewCustomImagesWrapper.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsTabbedViewCustomImagesWrapper.Dispose(System.Boolean)"> 			<summary>Releases unmanaged resources.</summary> 			<param name="disposing">True if called by Dispose, false if called from a finalizer</param> 		</member>

		<member name="P:ShinobiEssentials.SEssentialsTabbedViewCustomImagesWrapper.ActiveImage">
			<summary>
				Graphics for the active tab item button.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTabbedViewCustomImagesWrapper.InactiveImage">
			<summary>
				Graphics for the inactive tab item button.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTabbedViewCustomImagesWrapper.ActiveTabMask">
			<summary>
				The mask image to use for active tabs.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTabbedViewCustomImagesWrapper.InactiveTabMask">
			<summary>
				The mask image to use for inactive tabs.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTabbedViewCustomImagesWrapper.CloseTabImage">
			<summary>
				Graphics for the close tab icon
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTabbedViewCustomImagesWrapper.CloseTabPressedImage">
			<summary>
				Graphics for the close tab icon pressed.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTabbedViewCustomImagesWrapper.AddTabImage">
			<summary>
				Graphics for the 'new tab' button.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTabbedViewCustomImagesWrapper.AddTabPressedImage">
			<summary>
				Graphics for the 'new tab' button when pressed.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTabbedViewCustomImagesWrapper.AddTabMask">
			<summary>
				Graphics for the 'new tab' button mask.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTabbedViewCustomImagesWrapper.OverflowTabsImage">
			<summary>
				Graphics for the 'overflow dropdown' button.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTabbedViewCustomImagesWrapper.OverflowTabsPressedImage">
			<summary>
				Graphics for the 'overflow dropdown' button when pressed.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTabbedViewCustomImagesWrapper.OverflowTabsMask">
			<summary>
				Graphics for the 'overflow dropdown' button mask.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTabbedViewCustomImagesWrapper.ButtonsMask">
			<summary>
				Graphics for the background mask of the 'new tab' and 'overflow dropdown' buttons.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTabbedViewCustomImagesWrapper.TabBackgroundImage">
			<summary>
				Graphics for the background of the tab bar.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTabbedViewCustomImagesWrapper.TabBackgroundMask">
			<summary>
				Graphics for the mask of the background of the tab bar.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTabbedViewCustomImagesWrapper.ButtonsEndImage">
			<summary>
				Graphics for the edge of the tab bar under the buttons.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTabbedViewCustomImagesWrapper.ButtonsEndImageMask">
			<summary>
				Graphics for the mask of the edge of the tab bar under the buttons.
			</summary>
			<remarks></remarks>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsTabbedViewDataSource">
			<summary>An object which provides content for a SEssentialsTabbedView control.</summary>
			<remarks>
				When a tab is activated the DataSource is called to retrieve the associated view.
				The view is only retained by SEssentialsTabbedView for the duration that the tab is active.
				Typically the implementation uses a Dictionary that maps SEssentialsTab to UIView.</remarks>
		</member>

	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDataSource.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDataSource.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDataSource.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDataSource.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewDataSource.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDataSource.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDataSource.ConformsToProtocol(System.IntPtr)">
	      <summary>Checks whether this object conforms to a protocol.
	      </summary>
		  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
		  <param name="protocol">The protocol</param>
		  <returns>True if the object conforms to the protocol</returns>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDataSource.GetContent(ShinobiEssentials.SEssentialsTabbedView,ShinobiEssentials.SEssentialsTab)">
			<summary>Gets a view to put in a tab.</summary>
			<remarks>This is called before the view associated with the tab becomes active</remarks>
			<param name="tabbedView">SEssentialsTabbedView that contains the tab</param>
			<param name="tab">The SEssentialsTab that will become active</param>
			<returns>The UIView that will be shown when the tab becomes active</returns>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDataSource.GetTab(ShinobiEssentials.SEssentialsTabbedView)">
			<summary>This is called when a user clicks the 'add tab' button on a tabbed view.</summary>
			<remarks>The implementation should create and return a new SEssentialsTab with suitable
 default fields and add an associated content view to the DataSource.
 If this is not implemented the 'add tab' button will have no action.</remarks>
			<param name="tabbedView">SEssentialsTabbedView that contains the tab</param>
			<returns>The SEssentialsTab that will be added to the tabbed view.</returns>
	    </member>
			

		<member name="T:ShinobiEssentials.SEssentialsTabbedViewDelegate">
			<summary>Tabbed view delegate base class</summary>
			<remarks>These callbacks allow for notification and control of events occurring in the tabbed view. When the user adds, removes, activates or moves a tab a callback is generated.</remarks>
		</member>

	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDelegate.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDelegate.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDelegate.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDelegate.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewDelegate.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDelegate.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDelegate.ConformsToProtocol(System.IntPtr)">
	      <summary>Checks whether this object conforms to a protocol.
	      </summary>
		  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
		  <param name="protocol">The protocol</param>
		  <returns>True if the object conforms to the protocol</returns>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDelegate.TabShouldBecomeActive(ShinobiEssentials.SEssentialsTabbedView,ShinobiEssentials.SEssentialsTab)">
			<summary>This is called before a tab becomes active to determine whether or not the tab should be made active</summary>
			<param name="tabbedView">The SEssentialsTabbedView that contains the tab</param>
			<param name="tab">The SEssentialsTab that will become active</param>
			<returns>A boolean value indicating if the tab should become active</returns>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDelegate.TabWillBecomeActive(ShinobiEssentials.SEssentialsTabbedView,ShinobiEssentials.SEssentialsTab)">
			<summary>This is called before a tab becomes active</summary>
			<param name="tabbedView">The SEssentialsTabbedView that contains the tab</param>
			<param name="tab">The SEssentialsTab that will become active</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDelegate.TabDidBecomeActive(ShinobiEssentials.SEssentialsTabbedView,ShinobiEssentials.SEssentialsTab)">
			<summary>This is called after a tab becomes active</summary>
			<param name="tabbedView">The SEssentialsTabbedView that contains the tab</param>
			<param name="tab">The SEssentialsTab that has become active</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDelegate.TabShouldBecomeInactive(ShinobiEssentials.SEssentialsTabbedView,ShinobiEssentials.SEssentialsTab)">
			<summary>This is called before a tab becomes inactive to determine whether or not the tab should become inactive</summary>
			<param name="tabbedView">The SEssentialsTabbedView that contains the tab</param>
			<param name="tab">The SEssentialsTab that will become inactive</param>
			<returns>A boolean value indicating if the tab should become inactive</returns>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDelegate.TabDidBecomeInactive(ShinobiEssentials.SEssentialsTabbedView,ShinobiEssentials.SEssentialsTab)">
			<summary>This is called after a tab becomes inactive</summary>
			<param name="tabbedView">The SEssentialsTabbedView that contains the tab</param>
			<param name="tab">The SEssentialsTab that has become inactive</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDelegate.TabWillBecomeInactive(ShinobiEssentials.SEssentialsTabbedView,ShinobiEssentials.SEssentialsTab)">
			<summary>This is called before a tab becomes inactive</summary>
			<param name="tabbedView">The SEssentialsTabbedView that contains the tab</param>
			<param name="tab">The SEssentialsTab that will become inactive</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDelegate.ShouldAddTab(ShinobiEssentials.SEssentialsTabbedView,ShinobiEssentials.SEssentialsTab)">
			<summary>This is called before a tab is added to determine whether or not the tab should be added</summary>
			<param name="tabbedView">The SEssentialsTabbedView that contains the tab</param>
			<param name="tab">The SEssentialsTab that will be added</param>
			<returns>A boolean value indicating if the tab should be added</returns>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDelegate.WillAddTab(ShinobiEssentials.SEssentialsTabbedView,ShinobiEssentials.SEssentialsTab)">
			<summary>This is called before a tab is added</summary>
			<param name="tabbedView">The SEssentialsTabbedView that contains the tab</param>
			<param name="tab">The SEssentialsTab that was added</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDelegate.DidAddTab(ShinobiEssentials.SEssentialsTabbedView,ShinobiEssentials.SEssentialsTab)">
			<summary>This is called after a tab is added</summary>
			<param name="tabbedView">The SEssentialsTabbedView that contains the tab</param>
			<param name="tab">The SEssentialsTab that will be added</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDelegate.ShouldRemoveTab(ShinobiEssentials.SEssentialsTabbedView,ShinobiEssentials.SEssentialsTab)">
			<summary>This is called before a tab is removed to determine whether or not the tab should be removed</summary>
			<param name="tabbedView">The SEssentialsTabbedView that contains the tab</param>
			<param name="tab">The tab that may be removed</param>
			<returns>A boolean value indicating if the tab should be removed</returns>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDelegate.WillRemoveTab(ShinobiEssentials.SEssentialsTabbedView,ShinobiEssentials.SEssentialsTab)">
			<summary>This is called before a tab is removed</summary>
			<param name="tabbedView">The SEssentialsTabbedView that contains the tab</param>
			<param name="tab">The SEssentialsTab that will be removed</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDelegate.DidRemoveTab(ShinobiEssentials.SEssentialsTabbedView,ShinobiEssentials.SEssentialsTab)">
			<summary>This is called after a tab is removed</summary>
			<param name="tabbedView">The SEssentialsTabbedView that contains the tab</param>
			<param name="tab">The SEssentialsTab that was removed</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDelegate.ShouldMoveTab(ShinobiEssentials.SEssentialsTabbedView,ShinobiEssentials.SEssentialsTab)">
			<summary>This is called before a tab is moved to determine whether or not the tab should be moved.</summary>
			<param name="tabbedView">The SEssentialsTabbedView that contains the tab</param>
			<param name="tab">The SEssentialsTab that should be moved</param>
			<returns>A boolean value indicating if the tab should be moved.</returns>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDelegate.WillMoveTab(ShinobiEssentials.SEssentialsTabbedView,ShinobiEssentials.SEssentialsTab,System.Int32,System.Int32)">
			<summary>This is called before a tab is moved to a new position.</summary>
			<param name="tabbedView">The SEssentialsTabbedView that contains the tab</param>
			<param name="tab">The SEssentialsTab that will be moved</param>
			<param name="fromIndex">The index from which the tab will be moved</param>
			<param name="toIndex">The index to which the tab will be moved</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewDelegate.DidMoveTab(ShinobiEssentials.SEssentialsTabbedView,ShinobiEssentials.SEssentialsTab,System.Int32,System.Int32)">
			<summary>This is called after a tab is moved.</summary>
			<param name="tabbedView">The SEssentialsTabbedView that contains the tab</param>
			<param name="tab">The SEssentialsTab that was moved</param>
			<param name="fromIndex">The index from which the tab was moved</param>
			<param name="toIndex">The index to which the tab was moved</param>
	    </member>
			

		<member name="T:ShinobiEssentials.SEssentialsTabbedViewStyle">
			<summary>Defines the look and feel for an instance of the SEssentialsTabbedView class.</summary>
			<remarks>
				<para>
					The <c>SEssentialsTabbedViewStyle</c> defines the look and feel for an instance of the
					<c>SEssentialsTabbedView</c> class.  If you wish to update how a tabbed view looks, you should update its
					style object.
				</para><para>
					<c>SEssentialsTabbedViewStyle</c> derives from <c>SEssentialsStyle</c>, and so it is initialized with an
					<c>SEssentialsTheme</c> object. The theme provides the default settings for the style.
				</para><para>
					The following default settings are provided by the theme:
					<list type="bullet">
						<item><term>The <c>PrimaryTintColor</c> on the theme is used for the background color of the tab header views (<c>TintColor</c>).</term></item>
						<item><term>The <c>SecondaryTintColor</c> on the theme is used for the background color of the tab bar (<c>TabBarBackgroundColor</c>).</term></item>
						<item><term>The <c>SecondaryTexture</c> on the theme is used for the background texture of the tab bar (<c>TabBarBackgroundTexture</c>).</term></item>
						<item><term>The <c>PrimaryTextColor</c> on the theme is used for text in active tab header views (<c>DefaultFontColor</c>).</term></item>
						<item><term>The <c>SecondaryTextColor</c> on the theme is used as the color for text in inactive tab header views (<c>AlternativeFontColor</c>.).</term></item>
					</list>
				</para><para>
					Decoration can be applied to the tabbed view.  When decoration is applied, the following effects are added
					to the control:
					<list type="bullet">
						<item>
							<term>
								The tab header views are moved so they overlap slightly with each other. When no decoration is
								applied, the header views will line up without any overlap.
							</term>
						</item>
						<item>
							<term>
								The look of the overflow dropdown menu is changed. A translucent border is drawn around the
								menu, and a drop shadow is drawn beneath the menu.
							</term>
						</item>
					</list>
					The <c>Decoration</c> property controls whether decoration is applied to the control.
				</para>
			</remarks>
		</member>

	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewStyle.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewStyle.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewStyle.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewStyle.#ctor(ShinobiEssentials.SEssentialsTheme,MonoTouch.UIKit.UIImage,MonoTouch.UIKit.UIImage,MonoTouch.UIKit.UIImage,MonoTouch.UIKit.UIImage,MonoTouch.UIKit.UIImage,MonoTouch.UIKit.UIImage,MonoTouch.UIKit.UIImage,MonoTouch.UIKit.UIImage,MonoTouch.UIKit.UIImage,MonoTouch.UIKit.UIImage,MonoTouch.UIKit.UIImage,MonoTouch.UIKit.UIImage,MonoTouch.UIKit.UIImage,MonoTouch.UIKit.UIImage,MonoTouch.UIKit.UIImage,MonoTouch.UIKit.UIImage)">
			<summary>Initializes the style object with a set of custom images for the tabbed view.</summary>
			<remarks>
				If an image is passed in as nil, the style will use a default image for that property.
				Deprecated in 2.1, use <see cref="C:ShinobiEssentials.SEssentialsTabbedViewStyle(ShinobiEssentials.SEssentialsTheme,ShinobiEssentials.SEssentialsTabbedViewCustomImagesWrapper)" /> instead.
			</remarks>
			<param name="theme"></param>
			<param name="activeImage"></param>
			<param name="inactiveImage"></param>
			<param name="activeTabMask"></param>
			<param name="inactiveTabMask"></param>
			<param name="closeTabImage"></param>
			<param name="closeTabPressedImage"></param>
			<param name="addTabImage"></param>
			<param name="addTabPressedImage"></param>
			<param name="addTabMask"></param>
			<param name="overflowTabsImage"></param>
			<param name="overflowTabsPressedImage"></param>
			<param name="overflowTabsMask"></param>
			<param name="buttonsEndImage"></param>
			<param name="buttonsEndImageMask"></param>
			<param name="tabBackgroundImage"></param>
			<param name="tabBackgroundMask"></param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewStyle.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
		<member name="M:ShinobiEssentials.SEssentialsTabbedViewStyle.#ctor(ShinobiEssentials.SEssentialsTheme)">
		  <summary>Instantiates the style with the specified theme.</summary>
		  <param name="theme">The theme</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsTabbedViewStyle.#ctor(ShinobiEssentials.SEssentialsTheme,ShinobiEssentials.SEssentialsTabbedViewCustomImagesWrapper)">
			<summary>
				Initializes the style object with a set of custom images for the tabbed view, using the SEssentialsTabbedViewCustomImagesWrapper.
			</summary>
			<remarks>
				If an image is passed in as <c>null</c>, the style will use a default image for that property.
			</remarks>
		</member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewStyle.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.Flipped">
			<summary>Tabs can provide alternate images depending on the tab bar position</summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.DefaultFont">
			<summary>The default font used on the tab.</summary>
			<remarks>This defaults to the <c>SecondaryFont</c> on the theme.</remarks>
	    </member>
		
		<member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.DefaultFontColor">
			<summary>
				The default font color used on the active tab.
			</summary>
			<remarks>
				This defaults to the <c>PrimaryTextColor</c> on the theme.
			</remarks>
		</member>
		
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.MaximumTabWidth">
			<summary>When ResizeToText is true this acts as an upper limit on the width of the tab</summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.NewTabButtonWidth">
			<summary>The default width of the 'new tab' button.</summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.OverflowButtonWidth">
			<summary>The default width of the button that reveals the drop down of off-screen tabs</summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.ResizeToText">
			<summary>When true the tab width is sized to fit the text it contains</summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.Shine">
			<summary>Boolean controls shine layer applied to tabs</summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.TabHeight">
			<summary>The height of the area reserved for the tabs</summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.TintColor">
			<summary>The tint color of the tab header views.</summary>
			<remarks>This defaults to the <c>PrimaryTintColor</c> on the theme.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.TabBarBackgroundColor">
			<summary>The color of the background to the tab bar.</summary>
			<remarks>This defaults to the <c>SecondaryTintColor</c> on the theme.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.TabBarBackgroundTexture">
			<summary>The texture of the background to the tab bar.</summary>
			<remarks>This defaults to the <c>SecondaryTexture</c> on the theme.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.TabWidth">
			<summary>The default width of a tab.</summary>
			<remarks>This will be used when ResizeToText is false.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.ActiveImage">
			<summary>Graphics for the active tab item button</summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.AddTabImage">
			<summary>Graphics for the 'new tab' button</summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.ButtonsEndImage">
			<summary>Graphics for the edge of the tab bar under the buttons.</summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.ButtonsEndImageMask">
			<summary>Graphics for the mask of the edge of the tab bar under the buttons.</summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.AddTabMask">
			<summary>Graphics for the 'new tab' button mask</summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.AddTabPressedImage">
			<summary>Graphics for the 'new tab' button when pressed</summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.CloseTabImage">
			<summary>Graphics for the close tab icon</summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.CloseTabPressedImage">
			<summary>Graphics for the close tab icon pressed</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewStyle.DefaultFrame">
			<summary>Default frame size when tab is created</summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.OverflowTabsImage">
			<summary>Graphics for the 'overflow dropdow' button</summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.OverflowTabsMask">
			<summary>Graphics for the 'overflow dropdow' button mask</summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.OverflowTabsPressedImage">
			<summary>Graphics for the 'overflow dropdow' button when pressed</summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.InactiveImage">
			<summary>Graphics for the inactive tab item button</summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.TabBackgroundImage">
			<summary>Graphics for the background of the tab bar</summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.TabBackgroundMask">
			<summary>Graphics for the mask of the background of the tab bar</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewStyle.TabImageLeftInset">
			<summary>The size of the left inset on the tab active and inactive images.</summary>
			<remarks>The image provided needs to be of the 9-part stretchable form used by UIImage.CreateResizableImage with a 1x1 central stretchable area.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.ActiveTabMask">
			<summary>The mask image to use for active tabs</summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.InactiveTabMask">
			<summary>The mask image to use for inactive tabs</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabbedViewStyle.TabImageTopInset">
			<summary>The size of the top inset on the tab active and inactive images.</summary>
			<remarks>The image provided needs to be of the 9-part stretchable form used by UIImage.CreateResizableImage with a 1x1 central stretchable area.</remarks>
	    </member>

		<member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.DefaultOverflowFont">
			<summary>
				The default font used on the overflow picker.
			</summary>
			<remarks>
				This defaults to the <c>PrimaryFont</c> on the theme.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.AlternativeFontColor">
			<summary>
				The default font color used on the inactive tabs.
			</summary>
			<remarks>
				This defaults to the <c>SecondaryTextColor</c> on the theme.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.Decoration">
			<summary>
				Whether to apply decoration to the control.
			</summary>
			<remarks>
				When decoration is applied, the following effects are added to the control:
				<list type="bullet">
					<item><term>
						The tab header views are moved so they overlap slightly with each other.  When no decoration is applied,
						the header views will line up without any overlap.
					</term></item>
					<item><term>
						The look of the overflow dropdown menu is changed.  A translucent border is drawn around the menu, and a
						drop shadow is drawn beneath the menu.
					</term></item>
				</list>
				If <c>ElementStyle</c> on the theme is set to <c>Decorated</c>, this defaults to <c>true</c>. Otherwise, this
				defaults to <c>false</c>.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.TabButtonsTintColor">
			<summary>
				The tint color of the 'new tab' and 'overflow dropdown' icons.
			</summary>
			<remarks>
				This defaults to the <c>TertiaryTintColor</c> on the theme.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.ShadowDepth">
			<summary>
				The size of the shadow underneath the button area (containing the overflow and new tab buttons).
			</summary>
			<remarks>This defaults to the <c>ShadowDepth</c> on the theme.</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTabbedViewStyle.ButtonsMask">
			<summary>
				Graphics for the background mask of the 'new tab' and 'overflow dropdown' buttons.
			</summary>
			<remarks></remarks>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsTabContentView">
			<summary>An implementation of the SEssentialsContentViewProtocol</summary>
		</member>

	    <member name="M:ShinobiEssentials.SEssentialsTabContentView.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsTabContentView.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabContentView.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabContentView.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabContentView.#ctor(System.Drawing.RectangleF)">
			<summary>Initialize view with the specified frame rectangle.</summary>
			<param name="frame">Frame rectangle defining views extent</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabContentView.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabContentView.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabContentView.ParentTabbedView">
			<summary>The tabbed view this object belongs to</summary>
			<remarks>This is set automatically when the SEssentialsTabContentView is added to the SEssentialsTabbedView, which will probably have been added to a parent view with AddSubview. 
			If you set it explicitly it is your responsibility to hold a reference to the TabbedView (AddSubview will have done this for you), to avoid it being garbage collected. 
			This property does not itself do this for you (unlike most properties in the API) to match the behavior of the native code.
			</remarks>
	    </member>
			

		<member name="T:ShinobiEssentials.SEssentialsTabContentViewProtocol">
			<summary>Protocol for objects that can contain tab content</summary>
		</member>

	    <member name="M:ShinobiEssentials.SEssentialsTabContentViewProtocol.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsTabContentViewProtocol.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabContentViewProtocol.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabContentViewProtocol.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabContentViewProtocol.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabContentViewProtocol.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabContentViewProtocol.HideView(MonoTouch.UIKit.UIView)">
			<summary>This is called when a tab becomes inactive</summary>
			<param name="view"></param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabContentViewProtocol.ShowView(MonoTouch.UIKit.UIView)">
			<summary>This is called when a tab becomes active</summary>
			<param name="view"></param>
	    </member>
			

		<member name="T:ShinobiEssentials.SEssentialsTabHeaderView">
			<summary>A default implementation of header views for tabs in the SEssentialsTabbedView control.</summary>
			<remarks>
				<para>Each instance of a tab header view is associated with a tab.</para>
				<para>When a tab header view is tapped, it tells the SEssentialsTabbedView which contains it to activate the tab with which it is associated.</para>
				<para>The SEssentialsTabHeaderView takes its tint color from the SEssentialsTabbedViewStyle associated with the tabbed view.  When the style updates, the tab header view updates to match.</para>
			</remarks>
		</member>

	    <member name="M:ShinobiEssentials.SEssentialsTabHeaderView.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsTabHeaderView.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabHeaderView.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabHeaderView.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabHeaderView.#ctor(System.Drawing.RectangleF)">
			<summary>Initialize view with the specified frame rectangle.</summary>
			<remarks>Important note: the frame size is controlled by the tabbed view and the frame size supplied in this constructor is not respected. We would expect users to create tab header views using SEssentialsTabHeaderView(style, resizeToText).  However, given that this class extends UIView, it is possible for users to create the tab header view using any of the other UIView init methods.</remarks>
			<param name="frame">Frame rectangle defining views extent</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabHeaderView.#ctor(ShinobiEssentials.SEssentialsTabbedViewStyle,System.Boolean)">
			<summary>Initialize view with a style and optional resize to text</summary>
			<remarks></remarks>
			<param name="style">The style of the tabbed view control which will contain this view</param>
			<param name="resizeToText">Whether the header view will resize to show the text it contains.  This defaults to true.</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabHeaderView.#ctor(ShinobiEssentials.SEssentialsTab)">
			<summary>Create with the containing SEssentialsTab that holds it's name, icon information etc.</summary>
			<param name="tab">The containing tab</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabHeaderView.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabHeaderView.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabHeaderView.ConformsToProtocol(System.IntPtr)">
	      <summary>Checks whether this object conforms to a protocol.
	      </summary>
		  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
		  <param name="protocol">The protocol</param>
		  <returns>True if the object conforms to the protocol</returns>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabHeaderView.IconImageView">
			<summary>The iconImageView contains the icon, use this to customize the presentation of the icon.</summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabHeaderView.Label">
			<summary>The label renders the tab name, use this to customize the label</summary>
			<remarks>
				<para>The font and font color used for the label are obtained from SEssentialsTabbedViewStyle.</para>
				<para>Important. It is your responsibility to hold a reference to your label, to avoid it being garbage collected. 
				This property does not do this for you (unlike most properties in the API) to match the behavior of the native code.</para>
			</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabHeaderView.Tab">
			<summary>The SEssentialsTab that holds the reference to this view</summary>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabHeaderView.Active">
			<summary>Set the active tab</summary>
			<remarks>The SEssentialsTabHeaderView must render in two states active/inactive. Calls to this should update the rendered view to reflect the state in the tab area.</remarks>
			<param name="tab"></param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabHeaderView.Removable">
			<summary>Each SEssentialsTabHeaderView has a 'remove' button that can be shown or hidden through this method</summary>
			<param name="removable"></param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabHeaderView.UpdateView">
			<summary>When a property has changed the SEssentialsTab, the SEssentialsTabHeaderView can be updated with this method</summary>
	    </member>
			

		<member name="T:ShinobiEssentials.SEssentialsTabHeaderViewProtocol">
			<summary>The header view for a SEssentialsTab must adopt this protocol.</summary>
 			<remarks>In addition to this protocol the implementation should also handle 'touch' actions that should call ActivateTab on the SEssentialsTabbedView and also handle touches on the 'delete' section of the tab that should call RemoveTab.</remarks>
		</member>

	    <member name="M:ShinobiEssentials.SEssentialsTabHeaderViewProtocol.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsTabHeaderViewProtocol.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabHeaderViewProtocol.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabHeaderViewProtocol.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabHeaderViewProtocol.#ctor(System.Drawing.RectangleF)">
			<summary>Initialize view with the specified frame rectangle.</summary>
			<param name="frame">Frame rectangle defining views extent</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabHeaderViewProtocol.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabHeaderViewProtocol.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabHeaderViewProtocol.ConformsToProtocol(System.IntPtr)">
	      <summary>Checks whether this object conforms to a protocol.
	      </summary>
		  <remarks>Not normally called from application code - used by the Shinobi framework.</remarks>
		  <param name="protocol">The protocol</param>
		  <returns>True if the object conforms to the protocol</returns>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabHeaderViewProtocol.DestinationMarker">
			<summary>Get an image which represents a placeholder for this tab when it is being dragged.</summary>
			<remarks>This will commonly be a translucent snapshot of the tab header view.</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabHeaderViewProtocol.Active">
			<summary>The header view must render in two states: active/inactive. When set this should update the rendered view to reflect the state in the tab area.</summary>
			<param name="state"></param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabHeaderViewProtocol.Removable">
			<summary>Defines whether the tab header view will display some kind of control to allow the user to remove the tab.</summary>
			<remarks>The default implementation, SEssentialsTabHeaderView, has a 'remove' button that can be shown or hidden by setting this property</remarks>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTabHeaderViewProtocol.Tab">
			<summary>The SEssentialsTab that holds the reference to this view, set automatically on creation</summary>
			<remarks>Important. If you set this explicitly (unlikely) it is your responsibility to hold a reference to your object, to avoid it being garbage collected. 
				This property does not do this for you (unlike most properties in the API) to match the behavior of the native code.</remarks>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTabHeaderViewProtocol.UpdateView">
			<summary>When a property has changed the on SEssentialsTab, the header view is updated with this method</summary>
	    </member>
			

		<member name="T:ShinobiEssentials.SEssentialsTheme">
			<summary>
				Theme for SEssentials.
			</summary>
			<remarks>
				<para>
					The appearance of a ShinobiEssentials control is defined by its style object. The default settings of the
					style object are determined by the theme it is created with. A style object is always created with a
					theme, either one you set yourself, or the default global theme. The theme defines a set of generic
					properties, which individual style objects can then utilize for their specific needs.  The properties
					defined are:
					<list type="bullet">
						<item><term>A palette of colors to use within a control.</term></item>
						<item><term>A set of textures which can be used for sub-components of a control.</term></item>
						<item><term>A set of fonts and text colors which can be used within a control.</term></item>
					</list>
				</para><para>
					We also use the concept of decoration when configuring the look and feel of ShinobiEssentials controls.
					This refers to things such as shine, shadowing or chisel effects which are applied to the controls. In
					iOS7, we tend to turn off shine or shadowing effects, or at least make them a lot more subtle.  In
					earlier versions of iOS, we use shine and shadowing effects to make items look more realistic.  Chisel
					effects are applied in all versions of iOS, although again, they are more subtle in iOS7.
				</para><para>
					For more information on how the properties of a theme map to the properties of a specific style object,
					you should look at the API documentation for that style object. The available style objects are listed
					below:
					<list type="bullet">
						<item><term>Progress and activity indicators: <see cref="T:ShinobiEssentials.SEssentialsProgressIndicatorStyle" /></term></item>
						<item><term>Sliding overlay: <see cref="T:ShinobiEssentials.SEssentialsSlidingOverlayStyle" /></term></item>
						<item><term>Flow layout: <see cref="T:ShinobiEssentials.SEssentialsFlowLayoutStyle" /></term></item>
						<item><term>Tabbed view: <see cref="T:ShinobiEssentials.SEssentialsTabbedViewStyle" /></term></item>
						<item><term>Accordion: <see cref="T:ShinobiEssentials.SEssentialsAccordionSectionHeaderStyle" /></term></item>
					</list>
				</para>
			</remarks>
		</member>

	    <member name="M:ShinobiEssentials.SEssentialsTheme.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsTheme.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTheme.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTheme.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
	    <member name="P:ShinobiEssentials.SEssentialsTheme.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsTheme.Create(ShinobiEssentials.SEssentialsThemeType)">
			<summary>Creates a theme.</summary>
			<param name="type">The theme type</param>
	    </member>

	    <member name="M:ShinobiEssentials.SEssentialsTheme.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>

		<member name="P:ShinobiEssentials.SEssentialsTheme.PrimaryTexture">
			<summary>This sets the texture used on the background of controls and is supplied as a UIColor.</summary>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsTheme.PrimaryTextColor">
			<summary>This sets the font color of text used on controls.</summary>
			<remarks>
				e.g. <c>SEssentialsAccordion</c> section header font color, <c>SEssentialTabbedView</c>
				header font color.
			</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsTheme.PrimaryTintColor">
			<summary>The color used behind the texture of controls.</summary>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsTheme.SecondaryTexture">
			<summary>This sets the texture on subviews of controls and is supplied as a UIColor.</summary>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsTheme.SecondaryTextColor">
			<summary>This sets the secondary text color to use within controls.</summary>
			<remarks></remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsTheme.SecondaryTintColor">
			<summary>This sets the color used behind the texture on subviews of controls.</summary>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsTheme.TertiaryTintColor">
			<summary>This sets the color used on controls that require a third themed color.</summary>
			<remarks>e.g. the button in the <c>SEssentialsSlidingOverlay</c>.</remarks>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsTheme.SetSharedTheme(ShinobiEssentials.SEssentialsTheme)">
			<summary>DEPRECATED: You should use SEssentials.Theme instead.</summary>
			<remarks>Use <see cref="P:ShinobiEssentials.SEssentials.Theme" /> instead.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsTheme.SharedTheme">
			<summary>DEPRECATED: You should use SEssentials.Theme instead.</summary>
			<remarks>
				The default theme used by all controls is a singleton accessed through this method.
				When the properties on this are updated all dependent controls will update unless
				their styles have explicitly set values. By default this is initialized to SEssentialsDarkTheme.
				The default theme can be changed completely here and all dependent controls will update.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTheme.InactiveTintColor">
			<summary>
				The color used for controls which have elements with an inactive state.
			</summary>
			<remarks>
				An example of one of these controls would be the progress indicators.
				The background track of the indicator will use this color.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTheme.ActiveTintColor">
			<summary>
				The color used for controls which have elements with an active state.
			</summary>
			<remarks>
				An example of one of these controls would be the <c>SEssentialsAccordion</c> header.
				The pressed state of the header will use this color.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTheme.PrimaryFont">
			<summary>
				This sets the font used on controls which display text (e.g. the <c>SEssentialsAccordion</c> section title).
			</summary>
			<remarks>
				Individual controls will have styling options to control the font size.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTheme.SecondaryFont">
			<summary>
				The alternative font to use for text display (e.g. tab header titles).
			</summary>
			<remarks>
				If none is provided, the <c>PrimaryFont</c> will be used instead.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTheme.PrimaryDecorationTintColor">
			<summary>
				This sets the primary color to use for decorations (e.g. the chisel on the sliding overlay).
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTheme.SecondaryDecorationTintColor">
			<summary>
				This sets the secondary color to use for decorations (e.g. the chisel on the sliding overlay).
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTheme.ShineColor">
			<summary>
				This sets the shine color used on controls (e.g. toolbar shine on the sliding overlay, shine on progress indicators and accordion section headers).
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTheme.ShadowColor">
			<summary>
				This sets the drop shadow color used on controls (e.g. underneath the sliding overlay's overlay, and the accordion drop shadow).
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsTheme.ShadowDepth">
			<summary>
				The depth of the drop shadow used on controls (e.g. underneath the sliding overlay's overlay, and the accordion drop shadow).
			</summary>
			<remarks></remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsTheme.ElementStyle">
			<summary>
				The look and feel of sub-elements in each control will be affected by whether we are applying decoration to
				our control.
			</summary>
			<remarks>
				For example, in iOS7, we tend to not apply shading or shadowing, or at least use more subtle effects.
				In earlier versions of iOS, it is common to use shading and shadowing to give a more skeumorphic look. Sub-elements should reflect
				this. We currently provide two styles for sub-elements:
				<list type="bullet">
					<item><term>
						Flat. This is intended for use with iOS7 themes. Borders aren't applied around the edges of sub-elements,
						and shading effects are turned off.
					</term></item>
					<item><term>
						Decorated. This is intended for use with earlier versions of iOS. Sub-elements are given shading and shadowing
						effects, and some elements will be given extra borders or chrome.
					</term></item>
				</list>
			</remarks>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsThemeElementStyle">
			<summary></summary>
			<remarks></remarks>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsView">
			<summary>Base class, providing shadowing, shine and a textured background.</summary>
			<remarks>
				<para>SEssentialsView is a subclass of UIView which provides shadowing, shine and a textured background.</para>
				<para>By default, all of these properties are disabled.  Users can use the setter methods to turn on shine, shadow or texturing, or to change the background color of the view.</para>
			</remarks>
		</member>

	    <member name="M:ShinobiEssentials.SEssentialsView.#ctor">
	    	<summary>Default constructor.</summary>
	    </member>
	      
	    <member name="M:ShinobiEssentials.SEssentialsView.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
			<remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
			<param name="coder">The unarchiver object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsView.#ctor(System.IntPtr)">
			<summary>A constructor used when creating managed representations of unmanaged objects.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="handle">Handle of the unmanaged object</param>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsView.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
			<remarks>You should not invoke this method directly.</remarks>
			<param name="t">Unused sentinel value</param>
	    </member>
			
		<member name="M:ShinobiEssentials.SEssentialsView.#ctor(System.Drawing.RectangleF)">
		  <summary>Instantiates with the specified frame rectangle.
		  </summary>
		  <remarks></remarks>
		  <param name="frame">The frame rectangle</param>
		</member>
			
	    <member name="P:ShinobiEssentials.SEssentialsView.ClassHandle">
			<summary>The handle for this class.</summary>
	    </member>
			
	    <member name="M:ShinobiEssentials.SEssentialsView.Dispose(System.Boolean)">
			<summary>Releases unmanaged resources.</summary>
			<param name="disposing">True if called by Dispose, false if called from a finalizer</param>
	    </member>

		<member name="P:ShinobiEssentials.SEssentialsView.TextureLayer">
		<summary>The texture layer within the view.</summary>
		<remarks>By default, no texture is applied.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsView.ShineLayer">
		<summary>This layer adds a shine to the top of the view.</summary>
		<remarks>By default, this effect is disabled.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsView.ChiselLayer">
		<summary>This layer adds a chisel to the bottom of the view.</summary>
		<remarks>By default, this effect is disabled.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsView.LeftShadowLayer">
		<summary>Applies a shadow to the left hand side of the view.</summary>
		<remarks>By default, this shadow is disabled.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsView.RightShadowLayer">
		<summary>Applies a shadow to the right hand side of the view.</summary>
		<remarks>By default, this shadow is disabled.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsView.TopShadowLayer">
		<summary>Applies a shadow to the top of the view.</summary>
		<remarks>By default, this shadow is disabled.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsView.BottomShadowLayer">
		<summary>Applies a shadow to the bottom of the view.</summary>
		<remarks>By default, this shadow is disabled.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsView.ShineAlpha">
		<summary>Sets how strongly the shine layer on the view is shown over the view.</summary>
		<remarks>The maximum value is 1, and its minimum value is 0.  It defaults to 0.4.</remarks>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsView.TintColor">
		<summary>The background color of the view.</summary>
		</member>

		<member name="P:ShinobiEssentials.SEssentialsView.Texture">
		<summary>The background texture of the view.</summary>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsView.AddDecoration">
		<summary>Applies a shine to the top of the view and a chiseled line to the bottom of the view.</summary>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsView.AddShine">
		<summary>Applies a shine to the top of the view.</summary>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsView.AddChisel">
		<summary>Applies a chiseled line to the bottom of the view.</summary>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsView.AddShadowRight">
		<summary>Applies a shadow to the right hand side of the view.</summary>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsView.AddShadowLeft">
		<summary>Applies a shadow to the left hand side of the view.</summary>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsView.AddShadowTop">
		<summary>Applies a shadow to the top of the view</summary>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsView.AddShadowBottom">
		<summary>Applies a shadow to the bottom of the view.</summary>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsView.SetTintColor(MonoTouch.UIKit.UIColor)">
		<summary>Sets the background color of the view</summary>
		<param name="tintColor">The color to set the background of the view</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsView.SetTexture(MonoTouch.UIKit.UIColor)">
		<summary>Sets the background texture of the view.</summary>
		<param name="texture">The background texture to use in the view.</param>
		</member>

		<member name="M:ShinobiEssentials.SEssentialsView.ConfigureShineLayer(MonoTouch.UIKit.UIColor[],MonoTouch.Foundation.NSNumber[])">
		<summary>Configures the shine layer on the view.</summary>
		<remarks>
			You pass it a set of locations in the view at which colors should be applied, and a set of colors to be
			applied in those locations.
			The shine layer renders gradients between these locations.
		</remarks>
		<param name="colors">The colors to be applied must be specified as an array of UIColors.</param>
		<param name="locations">The locations where the colors will be applied.  Each object in the array should be a NSNumber, with a value between 0 and 1.</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsView.ShineTintColor">
			<summary>
				The tint color of the shine layer.
			</summary>
			<remarks>
				Defaults to White.
				The alpha value will be overridden by <c>ShineAlpha</c>.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsView.ChiselPrimaryTintColor">
			<summary>
				The main color of the chisel.
			</summary>
			<remarks>
				Defaults to Black.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsView.ChiselSecondaryTintColor">
			<summary>
				The complementary color of the chisel.
			</summary>
			<remarks>
				Defaults to white.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsView.ShadowTintColor">
			<summary>
				The color of the shadow layers.
			</summary>
			<remarks>
				Defaults to Black.
			</remarks>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsView.ShadowDepth">
			<summary>
				The depth of the drop shadow.
			</summary>
			<remarks>
				Defaults to <c>8</c>.
			</remarks>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsVerticalAlignment">
			<summary>Vertical alignment options: Top, Middle, Bottom</summary>
			<remarks>Used by <see cref="P:ShinobiEssentials.SEssentialsFlowLayout.VerticalSubviewAlignment" /></remarks>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsVerticalAlignment.Bottom">
			<summary>Align with bottom.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsVerticalAlignment.Middle">
			<summary>Align with middle.</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsVerticalAlignment.Top">
			<summary>Align with top.</summary>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsAnimationCurve">
			<summary>
				A class that provides a variety of curves for use with SEssentialCarousel.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurve.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurve.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurve.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsAnimationCurve.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurve.#ctor">
			<summary>
				Default constructor.
			</summary>
			<remarks>
				This class is abstract and cannot be directly instantiated.
			</remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurve.CurveForCurveType(ShinobiEssentials.SEssentialsAnimationCurveType)">
			<summary>
				Creates an animation curve from the passed type.
			</summary>
			<remarks></remarks>
			<param name="curveType">
				The type of curve to create.
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurve.ValueAtPercentTime(System.Single)">
			<summary>
				Get how far through the animation to display, based on the time.
			</summary>
			<remarks>
				Both time and returned value should be in the range <c>[0, 1]</c>.
			</remarks>
			<param name="percentTime">
				The proportion of the duration of the curve completed.
			</param>
			<returns>
				Value of the curve at specified time. Must be <c>0</c> at time <c>0</c> and <c>1</c> at time <c>1</c>.
			</returns>
		</member>
		

		<member name="T:ShinobiEssentials.SEssentialsAnimationCurveBounce">
			<summary>
				An SEssentialsAnimationCurve that has a bouncing animation.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveBounce.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveBounce.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveBounce.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsAnimationCurveBounce.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveBounce.#ctor">
			<summary>
				Default constructor.
			</summary>
			<remarks></remarks>
		</member>
		

		<member name="T:ShinobiEssentials.SEssentialsAnimationCurveEaseIn">
			<summary>
				An SEssentialsAnimationCurve that has an eased in animation.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveEaseIn.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveEaseIn.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveEaseIn.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsAnimationCurveEaseIn.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveEaseIn.#ctor">
			<summary>
				Default constructor.
			</summary>
			<remarks></remarks>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsAnimationCurveEaseInOut">
			<summary>
				An SEssentialsAnimationCurve that has an eased in and out animation.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveEaseInOut.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveEaseInOut.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveEaseInOut.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsAnimationCurveEaseInOut.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveEaseInOut.#ctor">
			<summary>
				Default constructor.
			</summary>
			<remarks></remarks>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsAnimationCurveEaseOut">
			<summary>
				An SEssentialsAnimationCurve that has an eased out animation.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveEaseOut.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveEaseOut.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveEaseOut.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsAnimationCurveEaseOut.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveEaseOut.#ctor">
			<summary>
				Default constructor.
			</summary>
			<remarks></remarks>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsAnimationCurveLinear">
			<summary>
				An SEssentialsAnimationCurve that has a linear animation.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveLinear.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveLinear.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveLinear.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsAnimationCurveLinear.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveLinear.#ctor">
			<summary>
				Default constructor.
			</summary>
			<remarks></remarks>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsAnimationCurveWobbleHeavy">
			<summary>
				An SEssentialsAnimationCurve that has a heavily wobbling animation.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveWobbleHeavy.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveWobbleHeavy.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveWobbleHeavy.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsAnimationCurveWobbleHeavy.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveWobbleHeavy.#ctor">
			<summary>
				Default constructor.
			</summary>
			<remarks></remarks>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsAnimationCurveWobbleLight">
			<summary>
				An SEssentialsAnimationCurve that has a lightly wobbling animation.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveWobbleLight.#ctor(MonoTouch.Foundation.NSCoder)">
			<summary>
				A constructor that initializes the object from the data stored in the unarchiver object.
			</summary>
			<remarks>
				This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).
			</remarks>
			<param name="coder">
				The unarchiver object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveWobbleLight.#ctor(System.IntPtr)">
			<summary>
				A constructor used when creating managed representations of unmanaged objects.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="handle">
				Handle of the unmanaged object
			</param>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveWobbleLight.#ctor(MonoTouch.Foundation.NSObjectFlag)">
			<summary>
				Constructor to call on derived classes to skip initialization and merely allocate the object.
			</summary>
			<remarks>
				You should not invoke this method directly.
			</remarks>
			<param name="t">
				Unused sentinel value
			</param>
		</member>
		
		<member name="P:ShinobiEssentials.SEssentialsAnimationCurveWobbleLight.ClassHandle">
			<summary>
				The handle for this class.
			</summary>
			<remarks></remarks>
		</member>
		
		<member name="M:ShinobiEssentials.SEssentialsAnimationCurveWobbleLight.#ctor">
			<summary>
				Default constructor.
			</summary>
			<remarks></remarks>
		</member>


		<member name="T:ShinobiEssentials.SEssentialsAnimationCurveType">
			<summary>
				An enum for the types of animation curves included in Essentials.
			</summary>
			<remarks>
				Used by <see cref="M:ShinobiEssentials.SEssentialsAnimationCurve.CurveForCurveType(ShinobiEssentials.SEssentialsAnimationCurveType)" />.
			</remarks>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsAnimationCurveType.Bounce">
			<summary>
				<see cref="T:ShinobiEssentials.SEssentialsAnimationCurveBounce" />
			</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsAnimationCurveType.EaseIn">
			<summary>
				<see cref="T:ShinobiEssentials.SEssentialsAnimationCurveEaseIn" />
			</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsAnimationCurveType.EaseInOut">
			<summary>
				<see cref="T:ShinobiEssentials.SEssentialsAnimationCurveEaseInOut" />
			</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsAnimationCurveType.EaseOut">
			<summary>
				<see cref="T:ShinobiEssentials.SEssentialsAnimationCurveEaseOut" />
			</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsAnimationCurveType.Linear">
			<summary>
				<see cref="T:ShinobiEssentials.SEssentialsAnimationCurveLinear" />
			</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsAnimationCurveType.WobbleHeavy">
			<summary>
				<see cref="T:ShinobiEssentials.SEssentialsAnimationCurveWobbleHeavy" />
			</summary>
		</member>
		
		<member name="F:ShinobiEssentials.SEssentialsAnimationCurveType.WobbleLight">
			<summary>
				<see cref="T:ShinobiEssentials.SEssentialsAnimationCurveWobbleLight" />
			</summary>
		</member>


	</members>
</doc>
